name: Auth0 FINAL 3

on:
  workflow_dispatch:
    inputs:
      source_environment:
        description: 'Source Auth0 Tenant'
        required: true
        type: choice
        options:
          - dev
          - stage
          - preprod
          - prod
        default: dev
      target_environment:
        description: 'Target Auth0 Tenant'
        required: true
        type: choice
        options:
          - dev
          - stage
          - preprod
          - prod
        default: stage
      allow_delete:
        description: 'Allow deletions in target tenant? (true/false)'
        required: false
        type: boolean
        default: "false"
      remove_localhost:
        description: 'Remove localhost entries'
        required: false
        type: boolean
        default: "true"
      perform_dry_run:
        description: 'Perform dry run validation'
        required: false
        type: boolean
        default: false

jobs:
  Perform_Auth0_Tenant_Migration:
    runs-on: ubuntu-latest
    outputs:
      source_env_name: ${{ steps.prepare_env_names.outputs.source_env_name }}
      target_env_name: ${{ steps.prepare_env_names.outputs.target_env_name }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Auth0 Deploy CLI, jq, and Node.js Dependencies
        run: |
          npm install -g auth0-deploy-cli
          sudo apt-get update && sudo apt-get install -y jq
          npm install js-yaml # Install js-yaml for Node.js script to handle YAML

      - name: Prepare Environment Names
        id: prepare_env_names
        run: |
          SOURCE_ENV_NAME="${{ github.event.inputs.source_environment }}"
          TARGET_ENV_NAME="${{ github.event.inputs.target_environment }}"
          echo "source_env_name_upper=$(echo "$SOURCE_ENV_NAME" | tr '[:lower:]' '[:upper:]')" >> $GITHUB_ENV
          echo "target_env_name_upper=$(echo "$TARGET_ENV_NAME" | tr '[:lower:]' '[:upper:]')" >> $GITHUB_ENV
          echo "source_env_name=$SOURCE_ENV_NAME" >> $GITHUB_OUTPUT
          echo "target_env_name=$TARGET_ENV_NAME" >> $GITHUB_OUTPUT

      - name: Extract Auth0 Actions Credentials for Target Environment
        id: extract_auth0_actions_credentials
        run: |
          # Extract Auth0 Actions credentials from JSON secrets for target environment
          TARGET_ENV="${{ github.event.inputs.target_environment }}"
          
          AUTH0_ACTIONS_DOMAINS='${{ secrets.AUTH0_ACTIONS_DOMAINS }}'
          AUTH0_ACTIONS_CLIENT_IDS='${{ secrets.AUTH0_ACTIONS_CLIENT_IDS }}'
          AUTH0_ACTIONS_CLIENT_SECRETS='${{ secrets.AUTH0_ACTIONS_CLIENT_SECRETS }}'
          
          # Extract values for target environment
          AUTH0_ACTIONS_DOMAIN=$(echo "$AUTH0_ACTIONS_DOMAINS" | jq -r --arg env "$TARGET_ENV" '.[$env]')
          AUTH0_ACTIONS_CLIENT_ID=$(echo "$AUTH0_ACTIONS_CLIENT_IDS" | jq -r --arg env "$TARGET_ENV" '.[$env]')
          AUTH0_ACTIONS_CLIENT_SECRET=$(echo "$AUTH0_ACTIONS_CLIENT_SECRETS" | jq -r --arg env "$TARGET_ENV" '.[$env]')
          
          # Validate extraction
          if [ "$AUTH0_ACTIONS_DOMAIN" = "null" ] || [ "$AUTH0_ACTIONS_CLIENT_ID" = "null" ] || [ "$AUTH0_ACTIONS_CLIENT_SECRET" = "null" ]; then
            echo "Error: Could not extract Auth0 Actions credentials for environment: $TARGET_ENV"
            echo "Available environments in AUTH0_ACTIONS_DOMAINS: $(echo "$AUTH0_ACTIONS_DOMAINS" | jq -r 'keys[]')"
            exit 1
          fi
          
          echo "Successfully extracted Auth0 Actions credentials for environment: $TARGET_ENV"
          echo "AUTH0_ACTIONS_DOMAIN (first 10 chars): ${AUTH0_ACTIONS_DOMAIN:0:10}..."
          echo "AUTH0_ACTIONS_CLIENT_ID (first 8 chars): ${AUTH0_ACTIONS_CLIENT_ID:0:8}..."
          
          # Set outputs (masked for security)
          echo "::add-mask::$AUTH0_ACTIONS_DOMAIN"
          echo "::add-mask::$AUTH0_ACTIONS_CLIENT_ID"
          echo "::add-mask::$AUTH0_ACTIONS_CLIENT_SECRET"
          echo "auth0_actions_domain=$AUTH0_ACTIONS_DOMAIN" >> $GITHUB_OUTPUT
          echo "auth0_actions_client_id=$AUTH0_ACTIONS_CLIENT_ID" >> $GITHUB_OUTPUT
          echo "auth0_actions_client_secret=$AUTH0_ACTIONS_CLIENT_SECRET" >> $GITHUB_OUTPUT

      - name: Set Source Auth0 Credentials and Export
        run: |
          # Get source environment credentials from secrets
          SOURCE_DOMAIN="${{ secrets[format('{0}_AUTH0_DOMAIN', env.source_env_name_upper)] }}"
          SOURCE_CLIENT_ID="${{ secrets[format('{0}_AUTH0_CLIENT_ID', env.source_env_name_upper)] }}"
          SOURCE_CLIENT_SECRET="${{ secrets[format('{0}_AUTH0_CLIENT_SECRET', env.source_env_name_upper)] }}"
          
          # Validate that the required credentials are present
          if [ -z "$SOURCE_DOMAIN" ] || [ -z "$SOURCE_CLIENT_ID" ] || [ -z "$SOURCE_CLIENT_SECRET" ]; then
            echo "Error: Missing Auth0 credentials for source environment ${{ github.event.inputs.source_environment }}"
            echo "Required secrets: ${{ env.source_env_name_upper }}_AUTH0_DOMAIN, ${{ env.source_env_name_upper }}_AUTH0_CLIENT_ID, ${{ env.source_env_name_upper }}_AUTH0_CLIENT_SECRET"
            exit 1
          fi
          
          # Defining the path to the source environment's config.json
          SOURCE_CONFIG_PATH="Auth0/${{ github.event.inputs.source_environment }}/config.json"
          
          echo "Validating $SOURCE_CONFIG_PATH before using it for export config generation..."
          if [ ! -f "$SOURCE_CONFIG_PATH" ]; then
            echo "Error: Config file $SOURCE_CONFIG_PATH does not exist."
            exit 1
          fi
          
          if jq empty "$SOURCE_CONFIG_PATH" > /dev/null 2>&1; then
            echo "$SOURCE_CONFIG_PATH is valid JSON."
          else
            echo "Error: $SOURCE_CONFIG_PATH is NOT valid JSON. Please check its content."
            cat "$SOURCE_CONFIG_PATH" # Print content for debugging
            exit 1
          fi

          # Creating export config with actual credentials and included resources
          jq \
          --arg domain "$SOURCE_DOMAIN" \
          --arg client_id "$SOURCE_CLIENT_ID" \
          --arg client_secret "$SOURCE_CLIENT_SECRET" \
          --argjson included_only '["actions", "clientGrants", "branding", "clients", "emailTemplates", "organizations", "pages", "prompts", "resourceServers", "roles", "tenant", "triggers"]' \
          '.AUTH0_DOMAIN = $domain | .AUTH0_CLIENT_ID = $client_id | .AUTH0_CLIENT_SECRET = $client_secret | .AUTH0_ALLOW_DELETE = false | .AUTH0_INCLUDED_ONLY = $included_only' \
          "$SOURCE_CONFIG_PATH" > temp_export_config.json

          echo "--- Export Config Content ---"
          jq 'del(.AUTH0_CLIENT_SECRET)' temp_export_config.json
          echo "--- End Export Config ---"

          echo "Exporting from $SOURCE_DOMAIN..."
          a0deploy export --config_file temp_export_config.json --format yaml --output_folder ./auth0_export_source

      - name: Archive Original Exported Configuration
        uses: actions/upload-artifact@v4
        with:
          name: original-export-from-${{ github.event.inputs.source_environment }}
          path: ./auth0_export_source

      - name: Generate REDIRECT_SECRET
        id: generate_redirect_secret
        run: |
          REDIRECT_SECRET=$(openssl rand -hex 32)
          echo "Generated REDIRECT_SECRET (first 8 chars): ${REDIRECT_SECRET:0:8}..."
          echo "REDIRECT_SECRET=$REDIRECT_SECRET" >> $GITHUB_OUTPUT

      - name: Transform tenant.yaml with secrets and keyword mappings
        run: |
          echo "Transforming tenant.yaml with secrets and keyword mappings..."
          
          # Creating a temporary Node.js script file
          cat <<'NODE_SCRIPT_EOF' > transform_script.js
          const fs = require('fs');
          const path = require('path');
          const yaml = require('js-yaml');

          const tenantYamlPath = path.join('./auth0_export_source', 'tenant.yaml');
          const outputTransformedTenantYamlPath = './transformed_tenant_preview.yaml';
          const redirectSecretValue = process.env.REDIRECT_SECRET_VALUE;
          const sourceEnv = process.env.SOURCE_ENV;
          const targetEnv = process.env.TARGET_ENV;
          const removeLocalhost = process.env.REMOVE_LOCALHOST === 'true';
          
          // Auth0 Actions credentials for target environment
          const auth0ActionsDomain = process.env.AUTH0_ACTIONS_DOMAIN;
          const auth0ActionsClientId = process.env.AUTH0_ACTIONS_CLIENT_ID;
          const auth0ActionsClientSecret = process.env.AUTH0_ACTIONS_CLIENT_SECRET;

          if (!fs.existsSync(tenantYamlPath)) {
            console.error('Error: Source tenant.yaml not found at: ' + tenantYamlPath);
            process.exit(1);
          }

          console.log('Reading tenant.yaml...');
          let tenantYamlContent = fs.readFileSync(tenantYamlPath, 'utf8');
          
          // Parse YAML to object for manipulation
          let tenantConfig;
          try {
            tenantConfig = yaml.load(tenantYamlContent);
          } catch (e) {
            console.error("Error parsing tenant.yaml:", e);
            process.exit(1);
          }

          // --- Function to remove localhost entries from arrays ---
          function removeLocalhostFromArray(arr, fieldName = null) {
            if (!Array.isArray(arr)) return arr;
            
            return arr.filter(item => {
              if (typeof item === 'string') {
                const shouldRemove = item.includes('localhost') || item.includes('127.0.0.1');
                if (shouldRemove) {
                  console.log(`Removed localhost entry: "${item}"`);
                }
                return !shouldRemove;
              } else if (typeof item === 'object' && item !== null && fieldName) {
                const fieldValue = item[fieldName];
                if (typeof fieldValue === 'string') {
                  const shouldRemove = fieldValue.includes('localhost') || fieldValue.includes('127.0.0.1');
                  if (shouldRemove) {
                    console.log(`Removed localhost entry from ${fieldName}: "${fieldValue}"`);
                  }
                  return !shouldRemove;
                }
              }
              return true;
            });
          }

          // --- Function to recursively process object for localhost removal ---
          function removeLocalhostFromObject(obj, path = '') {
            if (Array.isArray(obj)) {
              return removeLocalhostFromArray(obj);
            } else if (typeof obj === 'object' && obj !== null) {
              const result = {};
              for (const [key, value] of Object.entries(obj)) {
                const currentPath = path ? `${path}.${key}` : key;
                
                if (typeof value === 'string') {
                  const shouldRemove = value.includes('localhost') || value.includes('127.0.0.1');
                  if (shouldRemove) {
                    console.log(`Removed localhost string at ${currentPath}: "${value}"`);
                    continue; // Skip this property entirely
                  }
                  result[key] = value;
                } else if (Array.isArray(value)) {
                  // Handle specific array types that commonly contain URLs
                  if (key === 'callbacks' || key === 'allowed_origins' || key === 'web_origins' || 
                      key === 'allowed_logout_urls' || key === 'allowed_callback_urls') {
                    result[key] = removeLocalhostFromArray(value);
                  } else {
                    result[key] = removeLocalhostFromObject(value, currentPath);
                  }
                } else {
                  result[key] = removeLocalhostFromObject(value, currentPath);
                }
              }
              return result;
            }
            return obj;
          }

          // --- Remove localhost entries if flag is enabled ---
          if (removeLocalhost) {
            console.log('--- Removing localhost entries ---');
            tenantConfig = removeLocalhostFromObject(tenantConfig);
            console.log('--- Localhost removal complete ---');
          } else {
            console.log('--- Localhost removal is disabled ---');
          }

          // --- Function to inject Auth0 Actions secrets into actions ---
          function injectAuth0ActionsSecretsIntoAction(action) {
            if (!action.secrets) {
              action.secrets = [];
            }

            const secretMappings = {
              'AUTH0_ACTIONS_DOMAIN': auth0ActionsDomain,
              'AUTH0_ACTIONS_CLIENT_ID': auth0ActionsClientId,
              'AUTH0_ACTIONS_CLIENT_SECRET': auth0ActionsClientSecret
            };

            for (const [secretName, secretValue] of Object.entries(secretMappings)) {
              const existingSecretIndex = action.secrets.findIndex(s => s.name === secretName);
              
              if (existingSecretIndex > -1) {
                // Update existing secret
                action.secrets[existingSecretIndex].value = secretValue;
                console.log(`Updated '${secretName}' value in action: '${action.name}'.`);
              } else {
                // Only add the secret if it's referenced in the code, to avoid adding it to every action.
                const actionCode = action.code || '';
                if (actionCode.includes(secretName)) {
                  action.secrets.push({ name: secretName, value: secretValue });
                  console.log(`Added '${secretName}' to action: '${action.name}' (found reference in code).`);
                }
              }
            }
          }

          // --- Inject Auth0 Actions secrets into all actions that use them ---
          if (tenantConfig && tenantConfig.actions && Array.isArray(tenantConfig.actions)) {
            console.log('--- Processing actions for Auth0 Actions secrets injection ---');
            tenantConfig.actions.forEach(action => {
              if (action.name) {
                injectAuth0ActionsSecretsIntoAction(action);
              }
            });
            console.log('--- Auth0 Actions secrets injection complete ---');
          } else {
            console.warn("No 'actions' section found in tenant.yaml.");
          }

          // --- Inject REDIRECT_SECRET values into specific actions ---
          if (tenantConfig && tenantConfig.actions && Array.isArray(tenantConfig.actions)) {
            const actionsToUpdate = ['[Guard] Terms of use ', '[MFA] Email OTP'];

            actionsToUpdate.forEach(actionName => {
              const targetAction = tenantConfig.actions.find(action => action.name === actionName);

              if (targetAction) {
                if (!targetAction.secrets) {
                  targetAction.secrets = [];
                }

                const existingSecretIndex = targetAction.secrets.findIndex(s => s.name === 'REDIRECT_SECRET');
                
                if (existingSecretIndex > -1) {
                  // Update existing REDIRECT_SECRET with the generated value
                  targetAction.secrets[existingSecretIndex].value = redirectSecretValue;
                  console.log(`Updated 'REDIRECT_SECRET' value in action: '${actionName}'.`);
                } else {
                  // Add REDIRECT_SECRET if it doesn't exist
                  targetAction.secrets.push({ name: 'REDIRECT_SECRET', value: redirectSecretValue });
                  console.log(`Added 'REDIRECT_SECRET' to action: '${actionName}'.`);
                }
              } else {
                console.warn(`Action '${actionName}' not found in tenant.yaml.`);
              }
            });
          }

          // Convert back to YAML string for keyword replacement
          tenantYamlContent = yaml.dump(tenantConfig, { 
            lineWidth: -1,  // Prevent line wrapping
            noRefs: true    // Prevent YAML references
          });

          // --- Apply keyword replacement mappings ---
          const sourcePrefix = sourceEnv === 'prod' ? '' : sourceEnv + '.';
          const sourcePrefixBe = sourceEnv === 'prod' ? 'be.' : 'be' + sourceEnv + '.';
          const targetPrefix = targetEnv === 'prod' ? '' : targetEnv + '.';
          const targetPrefixBe = targetEnv === 'prod' ? 'be.' : 'be' + targetEnv + '.';
          
          const sourceAuth0ApiEnvPart = sourceEnv === 'stage' ? 'staging' : sourceEnv;
          const targetAuth0ApiEnvPart = targetEnv === 'stage' ? 'staging' : targetEnv;

          const mappings = {
            // Resource Server Identifiers & Client URLs
            [`https://${sourcePrefix}documentgenerator.bankenverband.de/`]: `https://${targetPrefix}documentgenerator.bankenverband.de/`,
            [`https://${sourcePrefix}usermanagement.bankenverband.de/`]: `https://${targetPrefix}usermanagement.bankenverband.de/`,
            [`https://${sourcePrefixBe}portal2.bankenverband.de/`]: `https://${targetPrefixBe}portal2.bankenverband.de/`,
            [`https://${sourcePrefixBe}elsa.bankenverband.de/`]: `https://${targetPrefixBe}elsa.bankenverband.de/`,
            [`https://${sourcePrefix}elsa.bankenverband.de`]: `https://${targetPrefix}elsa.bankenverband.de`,
            
            // Client URLs base
            [`https://${sourcePrefix}portal2.bankenverband.de`]: `https://${targetPrefix}portal2.bankenverband.de`,
            
            // Auth0 Management API
            [`https://bdb${sourceAuth0ApiEnvPart}.eu.auth0.com/api/v2/`]: `https://bdb${targetAuth0ApiEnvPart}.eu.auth0.com/api/v2/`,

            // Logo URL
            ["https://dev.portal2.bankenverband.de/assets/logo.svg"]: `https://${targetPrefix}portal2.bankenverband.de/assets/logo.svg`
          };
          
          console.log('Applying keyword replacement mappings:');
          console.log(JSON.stringify(mappings, null, 2));

          // Sort mapping keys by length (longest first) to avoid partial replacements
          const sortedMappingKeys = Object.keys(mappings).sort((a, b) => b.length - a.length);

          for (const sourceString of sortedMappingKeys) {
            const targetString = mappings[sourceString];
            // Escape special characters for regex
            const escapedSourceString = sourceString.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
            const regex = new RegExp(escapedSourceString, 'g');
            tenantYamlContent = tenantYamlContent.replace(regex, targetString);
          }

          fs.writeFileSync(outputTransformedTenantYamlPath, tenantYamlContent, 'utf8');
          console.log('Transformed tenant.yaml saved to: ' + outputTransformedTenantYamlPath);
          NODE_SCRIPT_EOF

          node transform_script.js
          NODE_EXIT_CODE=$?
          
          rm transform_script.js # Clean up

          if [ $NODE_EXIT_CODE -ne 0 ]; then
            echo "Error: Node.js transformation script failed."
            exit $NODE_EXIT_CODE
          fi
        env:
          REDIRECT_SECRET_VALUE: ${{ steps.generate_redirect_secret.outputs.REDIRECT_SECRET }}
          SOURCE_ENV: ${{ github.event.inputs.source_environment }}
          TARGET_ENV: ${{ github.event.inputs.target_environment }}
          REMOVE_LOCALHOST: ${{ github.event.inputs.remove_localhost }}
          AUTH0_ACTIONS_DOMAIN: ${{ steps.extract_auth0_actions_credentials.outputs.auth0_actions_domain }}
          AUTH0_ACTIONS_CLIENT_ID: ${{ steps.extract_auth0_actions_credentials.outputs.auth0_actions_client_id }}
          AUTH0_ACTIONS_CLIENT_SECRET: ${{ steps.extract_auth0_actions_credentials.outputs.auth0_actions_client_secret }}

      - name: Prepare Import Config File
        id: prepare_import_config
        run: |
          set -e
          set -x
      
          # Define the path to the target environment's config.json
          TARGET_CONFIG_PATH="Auth0/${{ github.event.inputs.target_environment }}/config.json"

          echo "Validating $TARGET_CONFIG_PATH before use..."
          if [ ! -f "$TARGET_CONFIG_PATH" ]; then
            echo "Error: Target config file $TARGET_CONFIG_PATH does not exist."
            echo "You need separate config.json files for each environment."
            exit 1
          fi
          
          if jq empty "$TARGET_CONFIG_PATH" > /dev/null 2>&1; then
            echo "$TARGET_CONFIG_PATH is valid JSON."
          else
            echo "Invalid JSON in $TARGET_CONFIG_PATH"
            exit 1
          fi

          # Get target environment credentials
          TARGET_DOMAIN_VALUE="${{ secrets[format('{0}_AUTH0_DOMAIN', env.target_env_name_upper)] }}"
          TARGET_CLIENT_ID_VALUE="${{ secrets[format('{0}_AUTH0_CLIENT_ID', env.target_env_name_upper)] }}"
          TARGET_CLIENT_SECRET_VALUE="${{ secrets[format('{0}_AUTH0_CLIENT_SECRET', env.target_env_name_upper)] }}"
          
          # Validate target credentials
          if [ -z "$TARGET_DOMAIN_VALUE" ] || [ -z "$TARGET_CLIENT_ID_VALUE" ] || [ -z "$TARGET_CLIENT_SECRET_VALUE" ]; then
            echo "Error: Missing Auth0 credentials for target environment ${{ github.event.inputs.target_environment }}"
            echo "Required secrets: ${{ env.target_env_name_upper }}_AUTH0_DOMAIN, ${{ env.target_env_name_upper }}_AUTH0_CLIENT_ID, ${{ env.target_env_name_upper }}_AUTH0_CLIENT_SECRET"
            exit 1
          fi
          
          SOURCE_ENV_NAME="${{ github.event.inputs.source_environment }}"
          TARGET_ENV_NAME="${{ github.event.inputs.target_environment }}"
          
          # Convert boolean to JSON boolean
          ALLOW_DELETE_VALUE="${{ github.event.inputs.allow_delete }}"

          SOURCE_PREFIX_DOT="$SOURCE_ENV_NAME."
          SOURCE_PREFIX_BE="be$SOURCE_ENV_NAME."
          
          if [ "$TARGET_ENV_NAME" = "prod" ]; then
            TARGET_PREFIX_DOT="" 
            TARGET_PREFIX_BE="be." 
            TARGET_AUTH0_API_ENV_PART="prod" 
          else
            TARGET_PREFIX_DOT="$TARGET_ENV_NAME."
            TARGET_PREFIX_BE="be$TARGET_ENV_NAME."
            TARGET_AUTH0_API_ENV_PART="$TARGET_ENV_NAME" 
          fi

          SOURCE_AUTH0_API_ENV_PART="$SOURCE_ENV_NAME"
          if [ "$SOURCE_ENV_NAME" = "stage" ]; then
            SOURCE_AUTH0_API_ENV_PART="staging" 
          fi
          
          # Create import config with all necessary settings
          jq \
            --arg target_domain "$TARGET_DOMAIN_VALUE" \
            --arg target_client_id "$TARGET_CLIENT_ID_VALUE" \
            --arg target_client_secret "$TARGET_CLIENT_SECRET_VALUE" \
            --argjson allow_delete "$ALLOW_DELETE_VALUE" \
            --argjson included_only '["actions", "clientGrants", "branding", "clients", "emailTemplates", "organizations", "pages", "prompts", "resourceServers", "roles", "tenant", "triggers"]' \
            --arg source_prefix_dot "$SOURCE_PREFIX_DOT" \
            --arg source_prefix_be "$SOURCE_PREFIX_BE" \
            --arg target_prefix_dot "$TARGET_PREFIX_DOT" \
            --arg target_prefix_be "$TARGET_PREFIX_BE" \
            --arg source_auth0_api_env_part "$SOURCE_AUTH0_API_ENV_PART" \
            --arg target_auth0_api_env_part "$TARGET_AUTH0_API_ENV_PART" \
            '
            .AUTH0_DOMAIN = $target_domain |
            .AUTH0_CLIENT_ID = $target_client_id |
            .AUTH0_CLIENT_SECRET = $target_client_secret |
            .AUTH0_ALLOW_DELETE = $allow_delete |
            .AUTH0_INCLUDED_ONLY = $included_only |
            .AUTH0_KEYWORD_REPLACE_MAPPINGS = {
              ("https://" + $source_prefix_dot + "documentgenerator.bankenverband.de/"): ("https://" + $target_prefix_dot + "documentgenerator.bankenverband.de/"),
              ("https://" + $source_prefix_dot + "usermanagement.bankenverband.de/"): ("https://" + $target_prefix_dot + "usermanagement.bankenverband.de/"),
              ("https://" + $source_prefix_be + "portal2.bankenverband.de/"): ("https://" + $target_prefix_be + "portal2.bankenverband.de/"),
              ("https://" + $source_prefix_be + "elsa.bankenverband.de/"): ("https://" + $target_prefix_be + "elsa.bankenverband.de/"),
              ("https://" + $source_prefix_dot + "elsa.bankenverband.de"): ("https://" + $target_prefix_dot + "elsa.bankenverband.de"), 
              ("https://" + $source_prefix_dot + "portal2.bankenverband.de"): ("https://" + $target_prefix_dot + "portal2.bankenverband.de"),
              ("https://bdb" + $source_auth0_api_env_part + ".eu.auth0.com/api/v2/"): ("https://bdb" + $target_auth0_api_env_part + ".eu.auth0.com/api/v2/"),
              ("https://dev.portal2.bankenverband.de/assets/logo.svg"): ("https://" + $target_prefix_dot + "portal2.bankenverband.de/assets/logo.svg")
            }
            ' \
            "$TARGET_CONFIG_PATH" > temp_import_config.json
          
          echo "--- Generated Import Config (without secrets) ---"
          jq 'del(.AUTH0_CLIENT_SECRET)' temp_import_config.json
          echo "--- End Generated Import Config ---"
          set +x

      - name: Verify Action Secrets Injection (Debug Mode)
        run: |
          echo "=== VERIFYING ACTION SECRETS INJECTION ==="
          
          # Create a Node.js script to analyze the transformed tenant config
          cat <<'VERIFY_SCRIPT_EOF' > verify_secrets.js
          const fs = require('fs');
          const yaml = require('js-yaml');
          
          const tenantYamlPath = './transformed_tenant_preview.yaml';
          
          if (!fs.existsSync(tenantYamlPath)) {
            console.error('Transformed tenant.yaml not found!');
            process.exit(1);
          }
          
          const tenantConfig = yaml.load(fs.readFileSync(tenantYamlPath, 'utf8'));
          
          if (!tenantConfig.actions || !Array.isArray(tenantConfig.actions)) {
            console.error('No actions found in tenant config');
            process.exit(1);
          }
          
          console.log('=== ACTION SECRETS VERIFICATION REPORT ===');
          console.log(`Total actions found: ${tenantConfig.actions.length}`);
          
          // Check for Auth0 Actions secrets injection
          const auth0ActionsSecretNames = ['AUTH0_ACTIONS_DOMAIN', 'AUTH0_ACTIONS_CLIENT_ID', 'AUTH0_ACTIONS_CLIENT_SECRET'];
          const redirectSecretActions = ['[Guard] Terms of use ', '[MFA] Email OTP'];
          
          let auth0ActionsSecretsFound = 0;
          let redirectSecretsFound = 0;
          
          tenantConfig.actions.forEach((action, index) => {
            if (!action.name) return;
            
            console.log(`\n--- Action ${index + 1}: "${action.name}" ---`);
            
            if (!action.secrets || !Array.isArray(action.secrets)) {
              console.log('  No secrets array found');
              return;
            }
            
            console.log(`  Total secrets: ${action.secrets.length}`);
            
            // Check for Auth0 Actions secrets
            const foundAuth0ActionsSecrets = action.secrets.filter(s => auth0ActionsSecretNames.includes(s.name));
            if (foundAuth0ActionsSecrets.length > 0) {
              console.log(`  Auth0 Actions secrets found: ${foundAuth0ActionsSecrets.map(s => s.name).join(', ')}`);
              foundAuth0ActionsSecrets.forEach(secret => {
                console.log(`    - ${secret.name}: ${secret.value ? '[VALUE SET]' : '[NO VALUE]'}`);
              });
              auth0ActionsSecretsFound += foundAuth0ActionsSecrets.length;
            }
            
            // Check for REDIRECT_SECRET
            const redirectSecret = action.secrets.find(s => s.name === 'REDIRECT_SECRET');
            if (redirectSecret) {
              console.log(`  REDIRECT_SECRET found: ${redirectSecret.value ? '[VALUE SET]' : '[NO VALUE]'}`);
              if (redirectSecretActions.includes(action.name)) {
                redirectSecretsFound++;
              }
            }
          });
          
          console.log('\n=== SUMMARY ===');
          console.log(`Auth0 Actions secrets injected: ${auth0ActionsSecretsFound}`);
          console.log(`REDIRECT_SECRET injected in target actions: ${redirectSecretsFound}/${redirectSecretActions.length}`);
          
          // Verify specific actions have REDIRECT_SECRET
          redirectSecretActions.forEach(actionName => {
            const action = tenantConfig.actions.find(a => a.name === actionName);
            if (action) {
              const hasRedirectSecret = action.secrets && action.secrets.find(s => s.name === 'REDIRECT_SECRET');
              console.log(`"${actionName}": ${hasRedirectSecret ? '✓ HAS REDIRECT_SECRET' : '✗ MISSING REDIRECT_SECRET'}`);
            } else {
              console.log(`"${actionName}": ✗ ACTION NOT FOUND`);
            }
          });
          
          VERIFY_SCRIPT_EOF
          
          node verify_secrets.js
          rm verify_secrets.js

      - name: Validate Credentials Are Available
        run: |
          echo "=== VALIDATING CREDENTIAL AVAILABILITY ==="
          
          # Check if the credentials we're trying to inject actually exist
          AUTH0_ACTIONS_DOMAIN="${{ steps.extract_auth0_actions_credentials.outputs.auth0_actions_domain }}"
          AUTH0_ACTIONS_CLIENT_ID="${{ steps.extract_auth0_actions_credentials.outputs.auth0_actions_client_id }}"
          REDIRECT_SECRET="${{ steps.generate_redirect_secret.outputs.REDIRECT_SECRET }}"
          
          if [ -n "$AUTH0_ACTIONS_DOMAIN" ]; then
            echo "✓ AUTH0_ACTIONS_DOMAIN is available (${AUTH0_ACTIONS_DOMAIN:0:10}...)"
          else
            echo "✗ AUTH0_ACTIONS_DOMAIN is missing"
          fi
          
          if [ -n "$AUTH0_ACTIONS_CLIENT_ID" ]; then
            echo "✓ AUTH0_ACTIONS_CLIENT_ID is available (${AUTH0_ACTIONS_CLIENT_ID:0:8}...)"
          else
            echo "✗ AUTH0_ACTIONS_CLIENT_ID is missing"
          fi
          
          if [ -n "$REDIRECT_SECRET" ]; then
            echo "✓ REDIRECT_SECRET is available (${REDIRECT_SECRET:0:8}...)"
          else
            echo "✗ REDIRECT_SECRET is missing"
          fi

      - name: Test Import Config Generation
        run: |
          echo "=== TESTING IMPORT CONFIGURATION ==="
          
          if [ -f "temp_import_config.json" ]; then
            echo "✓ Import config file generated successfully"
            
            # Validate it's valid JSON
            if jq empty temp_import_config.json > /dev/null 2>&1; then
              echo "✓ Import config is valid JSON"
            else
              echo "✗ Import config is invalid JSON"
              exit 1
            fi
            
            # Check for required fields
            DOMAIN=$(jq -r '.AUTH0_DOMAIN' temp_import_config.json)
            CLIENT_ID=$(jq -r '.AUTH0_CLIENT_ID' temp_import_config.json)
            ALLOW_DELETE=$(jq -r '.AUTH0_ALLOW_DELETE' temp_import_config.json)
            
            echo "Target domain: ${DOMAIN:0:10}..."
            echo "Target client ID: ${CLIENT_ID:0:8}..."
            echo "Allow delete: $ALLOW_DELETE"
            
          else
            echo "✗ Import config file not found"
            exit 1
          fi

      - name: Validate Import (Dry Run)
        if: github.event.inputs.perform_dry_run == 'true'
        run: |
          echo "Validating import configuration..."
          # We use the transformed yaml file as the input for validation/import
          a0deploy validate --config_file temp_import_config.json --input_file ./transformed_tenant_preview.yaml || echo "Validation completed with warnings"

      - name: Archive Verification Results
        uses: actions/upload-artifact@v4
        with:
          name: verification-results-${{ github.event.inputs.target_environment }}
          path: |
            ./transformed_tenant_preview.yaml
            temp_import_config.json
