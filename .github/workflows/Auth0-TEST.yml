name: Auth0 Environment Migration TEST

on:
  workflow_dispatch:
    inputs:
      sourceEnv:
        description: 'Source Tenant (e.g., BDB_DEV, BDB_STAGE)'
        required: true
        type: choice
        options: 
          - BDB_EXPERIMENTAL
          - BDB_DEV
          - BDB_PREPROD
          - BDB_STAGING
          - BDB_PROD
      targetEnv:
        description: 'Target Tenant (e.g., BDB_PREPROD, BDB_PROD)'
        required: true
        type: choice
        options:
          - BDB_EXPERIMENTAL
          - BDB_DEV
          - BDB_PREPROD
          - BDB_STAGING
          - BDB_PROD
      format:
        description: 'Export/Import Format'
        required: true
        type: choice
        options:
          - yaml
          - directory
        default: 'yaml'
      include_resources_list:
        description: 'Comma-separated list of resources. Empty for all, "NONE" for none.'
        required: false
        type: string
        default: ''
      deletionMode:
        description: 'Deletion mode for target environment'
        required: true
        type: choice
        options:
          - no-deletion
          - allow-deletion-with-confirmation
        default: 'no-deletion'
      operation_mode:
        description: 'Operation to perform'
        required: true
        type: choice
        options:
          - import_to_target
          - prepare_config_for_download
          - preview_resolved_keyword_map 
        default: 'prepare_config_for_download'

jobs:
  migrate:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.targetEnv }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Auth0 Deploy CLI and jq
        run: |
          npm install -g auth0-deploy-cli
          sudo apt-get update && sudo apt-get install -y jq

      - name: Validate Environment Selection
        if: github.event.inputs.sourceEnv == github.event.inputs.targetEnv && (github.event.inputs.operation_mode == 'import_to_target' || github.event.inputs.operation_mode == 'preview_resolved_keyword_map')
        run: |
          echo "ERROR: Source and target environments cannot be the same for an import or preview operation!"
          exit 1

      - name: Create Source Config
        run: |
          cat > source-config.json << EOF
          {
            "AUTH0_DOMAIN": "${{ secrets[format('AUTH0_DOMAIN_{0}', github.event.inputs.sourceEnv)] }}",
            "AUTH0_CLIENT_ID": "${{ secrets[format('AUTH0_CLIENT_ID_{0}', github.event.inputs.sourceEnv)] }}",
            "AUTH0_CLIENT_SECRET": "${{ secrets[format('AUTH0_CLIENT_SECRET_{0}', github.event.inputs.sourceEnv)] }}"
          }
          EOF

      - name: Prepare Configuration and Environment Variables
        id: prepare_config
        run: |
          TARGET_ENV_INPUT="${{ github.event.inputs.targetEnv }}"
          SOURCE_ENV_INPUT="${{ github.event.inputs.sourceEnv }}"
          echo "Source Environment: $SOURCE_ENV_INPUT"
          echo "Target Environment: $TARGET_ENV_INPUT"

          # Part 1: Select the Source-Specific Keyword Map Structure JSON
          SELECTED_KEYWORD_MAP_STRUCTURE_JSON=""
          case "$SOURCE_ENV_INPUT" in
             "BDB_DEV") SELECTED_KEYWORD_MAP_STRUCTURE_JSON='${{ secrets.AUTH0_KEYWORD_MAP_FROM_BDB_DEV }}' ;;
             "BDB_EXPERIMENTAL") SELECTED_KEYWORD_MAP_STRUCTURE_JSON='${{ secrets.AUTH0_KEYWORD_MAP_FROM_BDB_EXPERIMENTAL }}' ;;
             "BDB_STAGE") SELECTED_KEYWORD_MAP_STRUCTURE_JSON='${{ secrets.AUTH0_KEYWORD_MAP_FROM_BDB_STAGE }}' ;;
             "BDB_PREPROD") SELECTED_KEYWORD_MAP_STRUCTURE_JSON='${{ secrets.AUTH0_KEYWORD_MAP_FROM_BDB_PREPROD }}' ;;
             "BDB_PROD") SELECTED_KEYWORD_MAP_STRUCTURE_JSON='${{ secrets.AUTH0_KEYWORD_MAP_FROM_BDB_PROD }}' ;;
             *) echo "WARNING: No specific keyword map structure secret logic for source '$SOURCE_ENV_INPUT'."; SELECTED_KEYWORD_MAP_STRUCTURE_JSON='{}' ;;
          esac

          if [[ -z "$SELECTED_KEYWORD_MAP_STRUCTURE_JSON" || "$SELECTED_KEYWORD_MAP_STRUCTURE_JSON" == "null" ]]; then
            echo "Keyword map structure for source '$SOURCE_ENV_INPUT' is not set or empty. Defaulting to no keyword replacements from map."
            SELECTED_KEYWORD_MAP_STRUCTURE_JSON='{}'
          fi
          echo "::add-mask::$SELECTED_KEYWORD_MAP_STRUCTURE_JSON" # Mask sensitive data in logs
          echo "SELECTED_KEYWORD_MAP_STRUCTURE_JSON_CONTENT<<EOF" >> $GITHUB_OUTPUT
          echo "$SELECTED_KEYWORD_MAP_STRUCTURE_JSON" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT


          # Part 2: Select Target-Specific URL Definitions JSON
          TARGET_URL_DEFINITIONS_JSON=""
          case "$TARGET_ENV_INPUT" in
             "BDB_DEV") TARGET_URL_DEFINITIONS_JSON='${{ secrets.AUTH0_TARGET_URLS_FOR_BDB_DEV }}' ;;
             "BDB_EXPERIMENTAL") TARGET_URL_DEFINITIONS_JSON='${{ secrets.AUTH0_TARGET_URLS_FOR_BDB_EXPERIMENTAL }}' ;;
             "BDB_STAGE") TARGET_URL_DEFINITIONS_JSON='${{ secrets.AUTH0_TARGET_URLS_FOR_BDB_STAGE }}' ;;
             "BDB_PREPROD") TARGET_URL_DEFINITIONS_JSON='${{ secrets.AUTH0_TARGET_URLS_FOR_BDB_PREPROD }}' ;;
             "BDB_PROD") TARGET_URL_DEFINITIONS_JSON='${{ secrets.AUTH0_TARGET_URLS_FOR_BDB_PROD }}' ;;
             *) echo "ERROR: No target URL definitions secret logic for target '$TARGET_ENV_INPUT'."; exit 1 ;;
          esac

          if [[ -z "$TARGET_URL_DEFINITIONS_JSON" || "$TARGET_URL_DEFINITIONS_JSON" == "null" ]]; then
            echo "ERROR: Target URL definitions for target '$TARGET_ENV_INPUT' are not set or empty."
            exit 1
          fi
          echo "::add-mask::$TARGET_URL_DEFINITIONS_JSON" # Mask sensitive data in logs
          echo "TARGET_URL_DEFINITIONS_JSON_CONTENT<<EOF" >> $GITHUB_OUTPUT
          echo "$TARGET_URL_DEFINITIONS_JSON" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Part 3: Parse Target URL Definitions and Export Environment Variables for a0deploy
          echo "Setting environment variables for Auth0 Deploy CLI keyword replacement..."
          echo "$TARGET_URL_DEFINITIONS_JSON" | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while IFS='=' read -r key value; do
            if [[ -n "$key" && -n "$value" ]]; then
              echo "Exporting $key=***" # Mask value in log
              echo "$key=$value" >> $GITHUB_ENV
            fi
          done
          echo "Target environment variables for keyword replacement have been set from secret."

          # Part 4: Resource Selection Logic
          ALLOWED_RESOURCES=("actions" "clientGrants" "branding" "clients" "emailTemplates" "organizations" "pages" "prompts" "resourceServers" "roles" "tenant" "triggers")
          SELECTED_RESOURCES_INPUT_VAR="${{ github.event.inputs.include_resources_list }}"
          FINAL_SELECTED_RESOURCES=()
          if [[ -z "$SELECTED_RESOURCES_INPUT_VAR" ]]; then
            FINAL_SELECTED_RESOURCES=("${ALLOWED_RESOURCES[@]}")
          elif [[ "$(echo "$SELECTED_RESOURCES_INPUT_VAR" | tr '[:upper:]' '[:lower:]')" == "none" ]]; then
            FINAL_SELECTED_RESOURCES=()
          else
            IFS=',' read -r -a INPUT_ARRAY <<< "$SELECTED_RESOURCES_INPUT_VAR"
            for resource_candidate in "${INPUT_ARRAY[@]}"; do
              trimmed_resource=$(echo "$resource_candidate" | xargs)
              is_allowed=false
              for allowed_item in "${ALLOWED_RESOURCES[@]}"; do
                if [[ "$trimmed_resource" == "$allowed_item" ]]; then FINAL_SELECTED_RESOURCES+=("$trimmed_resource"); is_allowed=true; break; fi
              done
              if [[ "$is_allowed" == false && -n "$trimmed_resource" ]]; then echo "WARNING: Resource '$trimmed_resource' from 'include_resources_list' is not allowed and will be ignored."; fi
            done
          fi
          INCLUDED_ONLY_JSON_PART=""
          if [ ${#FINAL_SELECTED_RESOURCES[@]} -gt 0 ]; then
            RESOURCES_JSON=$(printf '"%s",' "${FINAL_SELECTED_RESOURCES[@]}" | sed 's/,$//')
            INCLUDED_ONLY_JSON_PART=', "AUTH0_INCLUDED_ONLY": ['$RESOURCES_JSON']'
          else INCLUDED_ONLY_JSON_PART=', "AUTH0_INCLUDED_ONLY": []'; fi
          echo "AUTH0_INCLUDED_ONLY part: $INCLUDED_ONLY_JSON_PART"

          # Part 5: Construct the final KEYWORD_MAPPINGS_JSON_PART using the selected source map structure
          KEYWORD_MAPPINGS_JSON_PART_VAR=""
          if [[ -n "$SELECTED_KEYWORD_MAP_STRUCTURE_JSON" && "$SELECTED_KEYWORD_MAP_STRUCTURE_JSON" != "{}" && "$SELECTED_KEYWORD_MAP_STRUCTURE_JSON" != "null" ]]; then
            KEYWORD_MAPPINGS_JSON_PART_VAR=', "AUTH0_KEYWORD_REPLACE_MAPPINGS": '$SELECTED_KEYWORD_MAP_STRUCTURE_JSON
            echo "AUTH0_KEYWORD_REPLACE_MAPPINGS will use the structure from the secret selected for source $SOURCE_ENV_INPUT."
          else
            echo "Keyword map structure is empty for source $SOURCE_ENV_INPUT or not set. No keyword mappings will be applied from this map."
            KEYWORD_MAPPINGS_JSON_PART_VAR=', "AUTH0_KEYWORD_REPLACE_MAPPINGS": {}'
          fi

          # Part 6: Create the target-config.json file
          TARGET_CONFIG_FILE="target-config.json"
          cat > $TARGET_CONFIG_FILE << EOF
          {
            "AUTH0_DOMAIN": "${{ env.TARGET_AUTH0_DOMAIN_ENVVAR }}",
            "AUTH0_CLIENT_ID": "${{ env.TARGET_AUTH0_CLIENT_ID_ENVVAR }}",
            "AUTH0_CLIENT_SECRET": "${{ env.TARGET_AUTH0_CLIENT_SECRET_ENVVAR }}",
            "AUTH0_ALLOW_DELETE": ${{ github.event.inputs.deletionMode == 'allow-deletion-with-confirmation' }}${INCLUDED_ONLY_JSON_PART}${KEYWORD_MAPPINGS_JSON_PART_VAR}
          }
          EOF
          echo "Generated $TARGET_CONFIG_FILE:"
          # cat $TARGET_CONFIG_FILE # Avoid printing secrets in config
          echo "target-config.json generated."

        env:
          TARGET_AUTH0_DOMAIN_ENVVAR: ${{ secrets[format('AUTH0_DOMAIN_{0}', github.event.inputs.targetEnv)] }}
          TARGET_AUTH0_CLIENT_ID_ENVVAR: ${{ secrets[format('AUTH0_CLIENT_ID_{0}', github.event.inputs.targetEnv)] }}
          TARGET_AUTH0_CLIENT_SECRET_ENVVAR: ${{ secrets[format('AUTH0_CLIENT_SECRET_{0}', github.event.inputs.targetEnv)] }}

      - name: Export from Source Environment
        if: github.event.inputs.operation_mode == 'import_to_target' || github.event.inputs.operation_mode == 'preview_resolved_keyword_map'
        run: |
          mkdir -p auth0-export
          echo "Starting export from ${{ github.event.inputs.sourceEnv }}..."
          a0deploy export \
            --config_file=source-config.json \
            --format=${{ github.event.inputs.format }} \
            --output_folder=auth0-export \
            --debug
          echo "Export finished."
          ls -la auth0-export

      - name: Preview Resolved Keyword Map
        if: github.event.inputs.operation_mode == 'preview_resolved_keyword_map'
        run: |
          echo "Generating preview of resolved keyword replacements..."
          # Retrieve the multi-line JSON content from the previous step's output
          SOURCE_MAP_JSON_CONTENT="${{ steps.prepare_config.outputs.SELECTED_KEYWORD_MAP_STRUCTURE_JSON_CONTENT }}"
          TARGET_URLS_JSON_CONTENT="${{ steps.prepare_config.outputs.TARGET_URL_DEFINITIONS_JSON_CONTENT }}"

          echo "--- DEBUG: SOURCE_MAP_JSON_CONTENT ---"
          echo "$SOURCE_MAP_JSON_CONTENT"
          echo "--- END DEBUG: SOURCE_MAP_JSON_CONTENT ---"
          echo "--- DEBUG: TARGET_URLS_JSON_CONTENT ---"
          echo "$TARGET_URLS_JSON_CONTENT"
          echo "--- END DEBUG: TARGET_URLS_JSON_CONTENT ---"

          # Validate SOURCE_MAP_JSON_CONTENT with jq
          echo "Validating Source Map JSON..."
          if ! echo "$SOURCE_MAP_JSON_CONTENT" | jq empty; then
            echo "ERROR: Source Map JSON is invalid."
            exit 1
          fi
          echo "Source Map JSON is valid."

          # Validate TARGET_URLS_JSON_CONTENT with jq
          echo "Validating Target URLs JSON..."
          if ! echo "$TARGET_URLS_JSON_CONTENT" | jq empty; then
            echo "ERROR: Target URLs JSON is invalid."
            exit 1
          fi
          echo "Target URLs JSON is valid."
          
          is_source_map_empty=$(echo "$SOURCE_MAP_JSON_CONTENT" | jq 'if . == null or . == "" or . == {} then "empty" else "notempty" end' -r)
          is_target_urls_empty=$(echo "$TARGET_URLS_JSON_CONTENT" | jq 'if . == null or . == "" or . == {} then "empty" else "notempty" end' -r)

          if [[ "$is_source_map_empty" == "empty" || "$is_target_urls_empty" == "empty" ]]; then
            echo "Cannot generate preview: Source map structure or target URL definitions are effectively empty."
            exit 0 
          fi

          echo "---------------------------------------------------------------------"
          echo "PREVIEW: The following replacements would be attempted by a0deploy:"
          echo " (based on selected source map and target URL definitions)"
          echo "---------------------------------------------------------------------"
          
          echo "$SOURCE_MAP_JSON_CONTENT" | jq -r --argjson targetUrls "$TARGET_URLS_JSON_CONTENT" '
            to_entries[] | 
            "Source URL to find: \"\(.key)\"\nPlaceholder in map: \"\(.value)\"\n\(
              if (.value | startswith("##") and endswith("##")) then
                (.value | ltrimstr("##") | rtrimstr("##")) as $placeholder_name |
                if $targetUrls[$placeholder_name] != null and $targetUrls[$placeholder_name] != "null" then # Added check for string "null"
                  "  ↳ Resolves to (Target URL): \"\($targetUrls[$placeholder_name])\""
                else
                  "  ↳ WARNING: Placeholder \"\(.value)\" (key: \($placeholder_name)) NOT FOUND or is null in target URL definitions!"
                end
              else
                "  ↳ INFO: Value is not a ##PLACEHOLDER##, will be used as is: \"\(.value)\""
              end
            )\n"
          '
          echo "---------------------------------------------------------------------"
          echo "Preview finished."
        
      - name: Warning for Deletion Mode
        if: github.event.inputs.deletionMode == 'allow-deletion-with-confirmation' && github.event.inputs.operation_mode == 'import_to_target'
        run: |
          echo "⚠️ WARNING: DELETION MODE IS ENABLED FOR IMPORT ⚠️"
          echo "This operation MAY DELETE resources in the target environment: ${{ github.event.inputs.targetEnv }}"
          echo "Proceeding with import in 10 seconds. Press Ctrl+C to abort..."
          sleep 10
          echo "Proceeding with import operation..."

      - name: Import to Target Environment
        if: github.event.inputs.operation_mode == 'import_to_target'
        run: |
          echo "Starting import to ${{ github.event.inputs.targetEnv }}..."
          echo "The following TARGET_ environment variables (from secrets) are available for keyword replacement by a0deploy:"
          env | grep '^TARGET_' | grep -vE '^TARGET_AUTH0_DOMAIN_ENVVAR|^TARGET_AUTH0_CLIENT_ID_ENVVAR|^TARGET_AUTH0_CLIENT_SECRET_ENVVAR' || echo "No TARGET_... keyword replacement variables found (this is okay if no map is used)."
          
          if [ "${{ github.event.inputs.format }}" == "yaml" ]; then
            a0deploy import \
              --config_file=target-config.json \
              --input_file=auth0-export/tenant.yaml \
              --debug
          else 
            a0deploy import \
              --config_file=target-config.json \
              --input_file=auth0-export \
              --debug
          fi
          echo "Import finished."

      - name: Upload Target Config for Inspection
        if: github.event.inputs.operation_mode == 'prepare_config_for_download'
        uses: actions/upload-artifact@v4
        with:
          name: auth0-target-config-${{ github.event.inputs.targetEnv }}
          path: target-config.json
          if-no-files-found: error

      - name: Clean up sensitive files
        if: always()
        run: |
          echo "Cleaning up configuration files..."
          rm -f source-config.json target-config.json
          echo "Configuration files removed."
