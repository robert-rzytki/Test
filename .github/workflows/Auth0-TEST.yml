name: [TEST] Auth0 Environment Migration

on:
  workflow_dispatch:
    inputs:
      sourceEnv:
        description: 'Source Tenant'
        required: true
        type: choice
        options:
          - bdbexperimental
          - bdbdev
          - bdbpreprod
          - bdbstaging
          - bdbprod
      targetEnv:
        description: 'Target Tenant'
        required: true
        type: choice
        options:
          - bdbexperimental
          - bdbdev
          - bdbpreprod
          - bdbstaging
          - bdbprod
      format:
        description: 'Export/Import Format'
        required: true
        type: choice
        options:
          - yaml
          - directory
        default: 'yaml'
      include_resources_list:
        description: 'Comma-separated list of resources to include (e.g., actions,clients,roles). Valid options: actions, clientGrants, branding, clients, emailTemplates, organizations, pages, prompts, resourceServers, roles, tenant, triggers. Leave empty to include all these, or "NONE" for an empty list.'
        required: false
        type: string
        default: '' # Default to empty, meaning all allowed resources
      deletionMode:
        description: 'Deletion mode for target environment'
        required: true
        type: choice
        options:
          - no-deletion
          - allow-deletion-with-confirmation
        default: 'no-deletion'
      operation_mode:
        description: 'Operation to perform'
        required: true
        type: choice
        options:
          - import_to_target
          - prepare_config_for_download
        default: 'prepare_config_for_download'

jobs:
  migrate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' # LTS version

      - name: Install Auth0 Deploy CLI
        run: npm install -g auth0-deploy-cli

      - name: Validate Environment Selection
        if: github.event.inputs.sourceEnv == github.event.inputs.targetEnv
        run: |
          echo "ERROR: Source and target environments cannot be the same!"
          exit 1

      - name: Create Source Config
        run: |
          cat > source-config.json << EOF
          {
            "AUTH0_DOMAIN": "${{ secrets[format('AUTH0_DOMAIN_{0}', upper(github.event.inputs.sourceEnv))] }}",
            "AUTH0_CLIENT_ID": "${{ secrets[format('AUTH0_CLIENT_ID_{0}', upper(github.event.inputs.sourceEnv))] }}",
            "AUTH0_CLIENT_SECRET": "${{ secrets[format('AUTH0_CLIENT_SECRET_{0}', upper(github.event.inputs.sourceEnv))] }}"
          }
          EOF
        env:
          AUTH0_DOMAIN_DEV: ${{ secrets.AUTH0_DOMAIN_DEV }}
          AUTH0_CLIENT_ID_DEV: ${{ secrets.AUTH0_CLIENT_ID_DEV }}
          AUTH0_CLIENT_SECRET_DEV: ${{ secrets.AUTH0_CLIENT_SECRET_DEV }}
          AUTH0_DOMAIN_TEST: ${{ secrets.AUTH0_DOMAIN_TEST }}
          AUTH0_CLIENT_ID_TEST: ${{ secrets.AUTH0_CLIENT_ID_TEST }}
          AUTH0_CLIENT_SECRET_TEST: ${{ secrets.AUTH0_CLIENT_SECRET_TEST }}
          AUTH0_DOMAIN_STAGING: ${{ secrets.AUTH0_DOMAIN_STAGING }}
          AUTH0_CLIENT_ID_STAGING: ${{ secrets.AUTH0_CLIENT_ID_STAGING }}
          AUTH0_CLIENT_SECRET_STAGING: ${{ secrets.AUTH0_CLIENT_SECRET_STAGING }}
          AUTH0_DOMAIN_PRODUCTION: ${{ secrets.AUTH0_DOMAIN_PRODUCTION }}
          AUTH0_CLIENT_ID_PRODUCTION: ${{ secrets.AUTH0_CLIENT_ID_PRODUCTION }}
          AUTH0_CLIENT_SECRET_PRODUCTION: ${{ secrets.AUTH0_CLIENT_SECRET_PRODUCTION }}

      - name: Create Target Config and Determine Included Resources
        id: create_target_config # Give an id to this step to access its outputs if needed
        run: |
          # Define the master list of allowed resource types
          ALLOWED_RESOURCES=("actions" "clientGrants" "branding" "clients" "emailTemplates" "organizations" "pages" "prompts" "resourceServers" "roles" "tenant" "triggers")
          
          SELECTED_RESOURCES_INPUT="${{ github.event.inputs.include_resources_list }}"
          FINAL_SELECTED_RESOURCES=()

          if [[ -z "$SELECTED_RESOURCES_INPUT" ]]; then
            echo "No specific resources listed in 'include_resources_list', defaulting to all allowed resources."
            FINAL_SELECTED_RESOURCES=("${ALLOWED_RESOURCES[@]}")
          elif [[ "$(echo "$SELECTED_RESOURCES_INPUT" | tr '[:upper:]' '[:lower:]')" == "none" ]]; then
            echo "'include_resources_list' is 'NONE', no specific resources will be included (empty AUTH0_INCLUDED_ONLY)."
            FINAL_SELECTED_RESOURCES=() # Empty array
          else
            echo "Processing 'include_resources_list': $SELECTED_RESOURCES_INPUT"
            # Convert comma-separated string to array, trim whitespace
            IFS=',' read -r -a INPUT_ARRAY <<< "$SELECTED_RESOURCES_INPUT"
            for resource_candidate in "${INPUT_ARRAY[@]}"; do
              # Trim whitespace from resource_candidate
              trimmed_resource=$(echo "$resource_candidate" | xargs) 
              # Validate against allowed resources
              is_allowed=false
              for allowed_item in "${ALLOWED_RESOURCES[@]}"; do
                if [[ "$trimmed_resource" == "$allowed_item" ]]; then
                  FINAL_SELECTED_RESOURCES+=("$trimmed_resource")
                  is_allowed=true
                  break
                fi
              done
              if [[ "$is_allowed" == false && -n "$trimmed_resource" ]]; then
                echo "WARNING: Resource '$trimmed_resource' from 'include_resources_list' is not in the allowed list and will be ignored."
              fi
            done
          fi

          INCLUDED_ONLY_JSON_PART=""
          if [ ${#FINAL_SELECTED_RESOURCES[@]} -gt 0 ]; then
            RESOURCES_JSON=$(printf '"%s",' "${FINAL_SELECTED_RESOURCES[@]}" | sed 's/,$//')
            INCLUDED_ONLY_JSON_PART=', "AUTH0_INCLUDED_ONLY": ['$RESOURCES_JSON']'
            echo "The following resources will be configured for AUTH0_INCLUDED_ONLY: ${FINAL_SELECTED_RESOURCES[*]}"
          else
            INCLUDED_ONLY_JSON_PART=', "AUTH0_INCLUDED_ONLY": []'
            echo "AUTH0_INCLUDED_ONLY will be an empty list."
          fi

          KEYWORD_MAPPINGS_JSON_PART=""
          if [[ -n "$KEYWORD_CONFIG_MAP_JSON" && "$KEYWORD_CONFIG_MAP_JSON" != "null" ]]; then
            if echo "$KEYWORD_CONFIG_MAP_JSON" | grep -qE '^\{.*\}$'; then
              KEYWORD_MAPPINGS_JSON_PART=', "AUTH0_KEYWORD_REPLACE_MAPPINGS": '$KEYWORD_CONFIG_MAP_JSON
              echo "Keyword mappings will be applied from the AUTH0_KEYWORD_CONFIG_MAP secret for ${{ upper(github.event.inputs.targetEnv) }}."
            else
              echo "WARNING: The AUTH0_KEYWORD_CONFIG_MAP secret for ${{ upper(github.event.inputs.targetEnv) }} is not a valid JSON object. No keyword mappings will be applied."
            fi
          else
            echo "No AUTH0_KEYWORD_CONFIG_MAP secret found or it is empty for ${{ upper(github.event.inputs.targetEnv) }}. No keyword mappings will be applied."
          fi

          # Create the target-config.json file
          TARGET_CONFIG_FILE="target-config.json"
          cat > $TARGET_CONFIG_FILE << EOF
          {
            "AUTH0_DOMAIN": "${{ env.TARGET_AUTH0_DOMAIN }}",
            "AUTH0_CLIENT_ID": "${{ env.TARGET_AUTH0_CLIENT_ID }}",
            "AUTH0_CLIENT_SECRET": "${{ env.TARGET_AUTH0_CLIENT_SECRET }}",
            "AUTH0_ALLOW_DELETE": ${{ github.event.inputs.deletionMode == 'allow-deletion-with-confirmation' }}${INCLUDED_ONLY_JSON_PART}${KEYWORD_MAPPINGS_JSON_PART}
          }
          EOF
          echo "Generated $TARGET_CONFIG_FILE:"
          cat $TARGET_CONFIG_FILE
        env:
          TARGET_AUTH0_DOMAIN: ${{ secrets[format('AUTH0_DOMAIN_{0}', upper(github.event.inputs.targetEnv))] }}
          TARGET_AUTH0_CLIENT_ID: ${{ secrets[format('AUTH0_CLIENT_ID_{0}', upper(github.event.inputs.targetEnv))] }}
          TARGET_AUTH0_CLIENT_SECRET: ${{ secrets[format('AUTH0_CLIENT_SECRET_{0}', upper(github.event.inputs.targetEnv))] }}
          KEYWORD_CONFIG_MAP_JSON: ${{ secrets[format('AUTH0_KEYWORD_CONFIG_MAP_{0}', upper(github.event.inputs.targetEnv))] }}

      - name: Export from Source Environment
        run: |
          mkdir -p auth0-export
          echo "Starting export from ${{ github.event.inputs.sourceEnv }}..."
          a0deploy export \
            --config_file=source-config.json \
            --format=${{ github.event.inputs.format }} \
            --output_folder=auth0-export \
            --debug
          echo "Export finished."
          ls -la auth0-export

      - name: Warning for Deletion Mode
        # This warning is relevant if we are about to import
        if: github.event.inputs.deletionMode == 'allow-deletion-with-confirmation' && github.event.inputs.operation_mode == 'import_to_target'
        run: |
          echo "⚠️ WARNING: DELETION MODE IS ENABLED FOR IMPORT ⚠️"
          echo "This operation MAY DELETE resources in the target environment: ${{ github.event.inputs.targetEnv }}"
          echo "Proceeding with import in 10 seconds. Press Ctrl+C to abort..."
          sleep 10
          echo "Proceeding with import operation..."

      - name: Import to Target Environment
        if: github.event.inputs.operation_mode == 'import_to_target'
        run: |
          echo "Starting import to ${{ github.event.inputs.targetEnv }}..."
          if [ "${{ github.event.inputs.format }}" == "yaml" ]; then
            a0deploy import \
              --config_file=target-config.json \
              --input_file=auth0-export/tenant.yaml \
              --debug
          else # format == 'directory'
            a0deploy import \
              --config_file=target-config.json \
              --input_file=auth0-export \
              --debug
          fi
          echo "Import finished."

      - name: Upload Target Config for Inspection
        if: github.event.inputs.operation_mode == 'prepare_config_for_download'
        uses: actions/upload-artifact@v4 # Use a more recent version
        with:
          name: auth0-target-config-${{ github.event.inputs.targetEnv }}
          path: target-config.json
          if-no-files-found: error # Fail the workflow if the file is not found

      - name: Clean up sensitive files
        if: always()
        run: |
          echo "Cleaning up configuration files..."
          rm -f source-config.json target-config.json
          echo "Configuration files removed."
