name: Auth0 Environment Migration TEST

on:
  workflow_dispatch:
    inputs:
      sourceEnv:
        description: 'Source Tenant (e.g., bdbdev, bdbstage)'
        required: true
        type: choice
        options:
          - BDB_EXPERIMENTAL
          - BDB_DEV
          - BDB_PREPROD
          - BDB_STAGING
          - BDB_PROD
      targetEnv:
        description: 'Target Tenant (e.g., bdbpreprod, bdbprod)'
        required: true
        type: choice
        options:
          - BDB_EXPERIMENTAL
          - BDB_DEV
          - BDB_PREPROD
          - BDB_STAGING
          - BDB_PROD
      format:
        description: 'Export/Import Format'
        required: true
        type: choice
        options:
          - yaml
          - directory
        default: 'yaml'
      include_resources_list:
        description: 'Comma-separated list of resources (actions,clients,roles,etc.). Empty for all, "NONE" for none.'
        required: false
        type: string
        default: ''
      deletionMode:
        description: 'Deletion mode for target environment'
        required: true
        type: choice
        options:
          - no-deletion
          - allow-deletion-with-confirmation
        default: 'no-deletion'
      operation_mode:
        description: 'Operation to perform'
        required: true
        type: choice
        options:
          - import_to_target
          - prepare_config_for_download
        default: 'prepare_config_for_download'

jobs:
  migrate:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.targetEnv }} # Optional: for GitHub Environments feature

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Auth0 Deploy CLI
        run: npm install -g auth0-deploy-cli

      - name: Validate Environment Selection
        if: github.event.inputs.sourceEnv == github.event.inputs.targetEnv && github.event.inputs.operation_mode == 'import_to_target'
        run: |
          echo "ERROR: Source and target environments cannot be the same for an import operation!"
          exit 1

      - name: Create Source Config
        run: |
          cat > source-config.json << EOF
          {
            "AUTH0_DOMAIN": "${{ secrets[format('AUTH0_DOMAIN_{0}', github.event.inputs.sourceEnv)] }}",
            "AUTH0_CLIENT_ID": "${{ secrets[format('AUTH0_CLIENT_ID_{0}', github.event.inputs.sourceEnv)] }}",
            "AUTH0_CLIENT_SECRET": "${{ secrets[format('AUTH0_CLIENT_SECRET_{0}', github.event.inputs.sourceEnv)] }}"
          }
          EOF

      - name: Define Target Env Vars & Create Target Config
        id: create_target_config
        run: |
          TARGET_ENV_INPUT="${{ github.event.inputs.targetEnv }}"
          SOURCE_ENV_INPUT="${{ github.event.inputs.sourceEnv }}"
          echo "Source Environment: $SOURCE_ENV_INPUT"
          echo "Target Environment: $TARGET_ENV_INPUT"

          # Part 1: Select the appropriate keyword map structure based on the SOURCE environment
          # The keys in this map structure must match what's in the source tenant's export
          SELECTED_KEYWORD_MAP_STRUCTURE_JSON=""
          # IMPORTANT: Ensure these secret names match what you create in GitHub
          # The secret name should correspond to the source environment type
          case "$SOURCE_ENV_INPUT" in
            "BDB_DEV")
              SELECTED_KEYWORD_MAP_STRUCTURE_JSON='${{ secrets.AUTH0_KEYWORD_MAP_FROM_BDB_DEV }}'
              ;;
            "BDB_EXPERIMENTAL") 
              SELECTED_KEYWORD_MAP_STRUCTURE_JSON='${{ secrets.AUTH0_KEYWORD_MAP_FROM_BDB_EXPERIMENTAL }}' # Or a shared one like AUTH0_KEYWORD_MAP_FROM_DEVLIKE if structure is same as dev
              ;;
            "bdb_stage")
              SELECTED_KEYWORD_MAP_STRUCTURE_JSON='${{ secrets.AUTH0_KEYWORD_MAP_FROM_BDB_STAGE }}'
              ;;
            "BDB_PREPROD")
              SELECTED_KEYWORD_MAP_STRUCTURE_JSON='${{ secrets.AUTH0_KEYWORD_MAP_FROM_BDB_PREPROD }}' # Or AUTH0_KEYWORD_MAP_FROM_BDB_PREPROD if you changed it
              ;;
            "BDB_PROD") 
              SELECTED_KEYWORD_MAP_STRUCTURE_JSON='${{ secrets.AUTH0_KEYWORD_MAP_FROM_BDB_PROD }}'
              ;;
            *)
              echo "WARNING: No specific keyword map structure defined for source environment '$SOURCE_ENV_INPUT'. Keyword replacement might not work as expected."
              SELECTED_KEYWORD_MAP_STRUCTURE_JSON='{}' # Default to an empty map
              ;;
          esac

          if [[ -z "$SELECTED_KEYWORD_MAP_STRUCTURE_JSON" || "$SELECTED_KEYWORD_MAP_STRUCTURE_JSON" == "null" ]]; then
            echo "Keyword map structure for source '$SOURCE_ENV_INPUT' is not set or empty. Defaulting to no keyword replacements from map."
            SELECTED_KEYWORD_MAP_STRUCTURE_JSON='{}'
          fi
          echo "Selected Keyword Map Structure (first 100 chars): $(echo "$SELECTED_KEYWORD_MAP_STRUCTURE_JSON" | cut -c 1-100)"


          # Part 2: Define actual URL/value strings for ##TARGET_...## placeholders based on the TARGET environment
          # These V_TARGET_... variables will become environment variables like TARGET_DOCGEN_URL
          # CRITICAL: Fill in ALL V_TARGET_... variables for EACH of your target environments
          case "$TARGET_ENV_INPUT" in
            "bdbdev")
              V_TARGET_DOCGEN_URL="https://dev.documentgenerator.some-site.de/"
              V_TARGET_USERMGMT_URL="https://dev.usermanagement.some-site.de/"
              V_TARGET_BE_PORTAL_URL="https://bedev.portal2.some-site.de/"
              V_TARGET_BE_ELSA_URL="https://bedev.elsa.some-site.de/"
              V_TARGET_ELSA_URL="https://dev.elsa.some-site.de"
              V_TARGET_PORTAL_CALLBACK_EDGE_URL="https://dev.portal2.some-site.de/api/edge-auth/callback"
              V_TARGET_PORTAL_LOGIN_URL="https://dev.portal2.some-site.de/api/auth/login"
              V_TARGET_PORTAL_CALLBACK_URL="https://dev.portal2.some-site.de/api/auth/callback"
              V_TARGET_PORTAL_LOGO_URL="https://dev.portal2.some-site.de/assets/logo.svg"
              V_TARGET_PORTAL_BASE_URL_SLASH="https://dev.portal2.some-site.de/"
              V_TARGET_PORTAL_BASE_URL_NOSLASH="https://dev.portal2.some-site.de"
              V_TARGET_FE_PORTAL_CALLBACK_EDGE_URL="https://fedev.portal2.some-site.de/api/edge-auth/callback"
              V_TARGET_FE_PORTAL_LOGIN_URL="https://fedev.portal2.some-site.de/api/auth/login"
              V_TARGET_FE_PORTAL_CALLBACK_URL="https://fedev.portal2.some-site.de/api/auth/callback"
              V_TARGET_FE_PORTAL_BASE_URL_SLASH="https://fedev.portal2.some-site.de/"
              V_TARGET_FE_PORTAL_BASE_URL_NOSLASH="https://fedev.portal2.some-site.de"
              V_TARGET_AUTH0_MGMT_API_AUDIENCE="https://some-sitedev.eu.auth0.com/api/v2/"
              ;;
            "bdbexperimental")
              V_TARGET_DOCGEN_URL="https://experimental.documentgenerator.some-site.de/"
              V_TARGET_USERMGMT_URL="https://experimental.usermanagement.some-site.de/"
              V_TARGET_BE_PORTAL_URL="https://beexperimental.portal2.some-site.de/"
              V_TARGET_BE_ELSA_URL="https://beexperimental.elsa.some-site.de/"
              V_TARGET_ELSA_URL="https://experimental.elsa.some-site.de"
              V_TARGET_PORTAL_CALLBACK_EDGE_URL="https://experimental.portal2.some-site.de/api/edge-auth/callback"
              V_TARGET_PORTAL_LOGIN_URL="https://experimental.portal2.some-site.de/api/auth/login"
              V_TARGET_PORTAL_CALLBACK_URL="https://experimental.portal2.some-site.de/api/auth/callback"
              V_TARGET_PORTAL_LOGO_URL="https://experimental.portal2.some-site.de/assets/logo.svg"
              V_TARGET_PORTAL_BASE_URL_SLASH="https://experimental.portal2.some-site.de/"
              V_TARGET_PORTAL_BASE_URL_NOSLASH="https://experimental.portal2.some-site.de"
              V_TARGET_FE_PORTAL_CALLBACK_EDGE_URL="https://feexperimental.portal2.some-site.de/api/edge-auth/callback"
              V_TARGET_FE_PORTAL_LOGIN_URL="https://feexperimental.portal2.some-site.de/api/auth/login"
              V_TARGET_FE_PORTAL_CALLBACK_URL="https://feexperimental.portal2.some-site.de/api/auth/callback"
              V_TARGET_FE_PORTAL_BASE_URL_SLASH="https://feexperimental.portal2.some-site.de/"
              V_TARGET_FE_PORTAL_BASE_URL_NOSLASH="https://feexperimental.portal2.some-site.de"
              V_TARGET_AUTH0_MGMT_API_AUDIENCE="https://some-siteexperimental.eu.auth0.com/api/v2/"
              ;;
            "bdbstage")
              V_TARGET_DOCGEN_URL="https://stage.documentgenerator.some-site.de/"
              V_TARGET_USERMGMT_URL="https://stage.usermanagement.some-site.de/"
              V_TARGET_BE_PORTAL_URL="https://bestage.portal2.some-site.de/"
              V_TARGET_BE_ELSA_URL="https://bestage.elsa.some-site.de/"
              V_TARGET_ELSA_URL="https://stage.elsa.some-site.de"
              V_TARGET_PORTAL_CALLBACK_EDGE_URL="https://stage.portal2.some-site.de/api/edge-auth/callback"
              V_TARGET_PORTAL_LOGIN_URL="https://stage.portal2.some-site.de/api/auth/login"
              V_TARGET_PORTAL_CALLBACK_URL="https://stage.portal2.some-site.de/api/auth/callback"
              V_TARGET_PORTAL_LOGO_URL="https://stage.portal2.some-site.de/assets/logo.svg"
              V_TARGET_PORTAL_BASE_URL_SLASH="https://stage.portal2.some-site.de/"
              V_TARGET_PORTAL_BASE_URL_NOSLASH="https://stage.portal2.some-site.de"
              V_TARGET_FE_PORTAL_CALLBACK_EDGE_URL="https://festage.portal2.some-site.de/api/edge-auth/callback"
              V_TARGET_FE_PORTAL_LOGIN_URL="https://festage.portal2.some-site.de/api/auth/login"
              V_TARGET_FE_PORTAL_CALLBACK_URL="https://festage.portal2.some-site.de/api/auth/callback"
              V_TARGET_FE_PORTAL_BASE_URL_SLASH="https://festage.portal2.some-site.de/"
              V_TARGET_FE_PORTAL_BASE_URL_NOSLASH="https://festage.portal2.some-site.de"
              V_TARGET_AUTH0_MGMT_API_AUDIENCE="https://some-sitestage.eu.auth0.com/api/v2/"
              ;;
            "bdbpreprod")
              V_TARGET_DOCGEN_URL="https://preprod.documentgenerator.some-site.de/"
              V_TARGET_USERMGMT_URL="https://preprod.usermanagement.some-site.de/"
              V_TARGET_BE_PORTAL_URL="https://bepreprod.portal2.some-site.de/"
              V_TARGET_BE_ELSA_URL="https://bepreprod.elsa.some-site.de/"
              V_TARGET_ELSA_URL="https://preprod.elsa.some-site.de"
              V_TARGET_PORTAL_CALLBACK_EDGE_URL="https://preprod.portal2.some-site.de/api/edge-auth/callback"
              V_TARGET_PORTAL_LOGIN_URL="https://preprod.portal2.some-site.de/api/auth/login"
              V_TARGET_PORTAL_CALLBACK_URL="https://preprod.portal2.some-site.de/api/auth/callback"
              V_TARGET_PORTAL_LOGO_URL="https://preprod.portal2.some-site.de/assets/logo.svg"
              V_TARGET_PORTAL_BASE_URL_SLASH="https://preprod.portal2.some-site.de/"
              V_TARGET_PORTAL_BASE_URL_NOSLASH="https://preprod.portal2.some-site.de"
              V_TARGET_FE_PORTAL_CALLBACK_EDGE_URL="https://fepreprod.portal2.some-site.de/api/edge-auth/callback"
              V_TARGET_FE_PORTAL_LOGIN_URL="https://fepreprod.portal2.some-site.de/api/auth/login"
              V_TARGET_FE_PORTAL_CALLBACK_URL="https://fepreprod.portal2.some-site.de/api/auth/callback"
              V_TARGET_FE_PORTAL_BASE_URL_SLASH="https://fepreprod.portal2.some-site.de/"
              V_TARGET_FE_PORTAL_BASE_URL_NOSLASH="https://fepreprod.portal2.some-site.de"
              V_TARGET_AUTH0_MGMT_API_AUDIENCE="https://some-sitepreprod.eu.auth0.com/api/v2/"
              ;;
            "bdbprod")
              V_TARGET_DOCGEN_URL="https://documentgenerator.some-site.de/"
              V_TARGET_USERMGMT_URL="https://usermanagement.some-site.de/"
              V_TARGET_BE_PORTAL_URL="https://be.portal2.some-site.de/"
              V_TARGET_BE_ELSA_URL="https://be.elsa.some-site.de/"
              V_TARGET_ELSA_URL="https://elsa.some-site.de"
              V_TARGET_PORTAL_CALLBACK_EDGE_URL="https://portal2.some-site.de/api/edge-auth/callback"
              V_TARGET_PORTAL_LOGIN_URL="https://portal2.some-site.de/api/auth/login"
              V_TARGET_PORTAL_CALLBACK_URL="https://portal2.some-site.de/api/auth/callback"
              V_TARGET_PORTAL_LOGO_URL="https://portal2.some-site.de/assets/logo.svg"
              V_TARGET_PORTAL_BASE_URL_SLASH="https://portal2.some-site.de/"
              V_TARGET_PORTAL_BASE_URL_NOSLASH="https://portal2.some-site.de"
              V_TARGET_FE_PORTAL_CALLBACK_EDGE_URL="https://fe.portal2.some-site.de/api/edge-auth/callback"
              V_TARGET_FE_PORTAL_LOGIN_URL="https://fe.portal2.some-site.de/api/auth/login"
              V_TARGET_FE_PORTAL_CALLBACK_URL="https://fe.portal2.some-site.de/api/auth/callback"
              V_TARGET_FE_PORTAL_BASE_URL_SLASH="https://fe.portal2.some-site.de/"
              V_TARGET_FE_PORTAL_BASE_URL_NOSLASH="https://fe.portal2.some-site.de"
              V_TARGET_AUTH0_MGMT_API_AUDIENCE="https://some-site.eu.auth0.com/api/v2/" 
              ;;
            *)
              echo "ERROR: Unknown targetEnv '$TARGET_ENV_INPUT'. Cannot set environment variables for keyword replacement."
              exit 1
              ;;
          esac

          # Part 3: Export these V_TARGET_... variables as environment variables (TARGET_...)
          echo "TARGET_DOCGEN_URL=$V_TARGET_DOCGEN_URL" >> $GITHUB_ENV
          echo "TARGET_USERMGMT_URL=$V_TARGET_USERMGMT_URL" >> $GITHUB_ENV
          echo "TARGET_BE_PORTAL_URL=$V_TARGET_BE_PORTAL_URL" >> $GITHUB_ENV
          echo "TARGET_BE_ELSA_URL=$V_TARGET_BE_ELSA_URL" >> $GITHUB_ENV
          echo "TARGET_ELSA_URL=$V_TARGET_ELSA_URL" >> $GITHUB_ENV
          echo "TARGET_PORTAL_CALLBACK_EDGE_URL=$V_TARGET_PORTAL_CALLBACK_EDGE_URL" >> $GITHUB_ENV
          echo "TARGET_PORTAL_LOGIN_URL=$V_TARGET_PORTAL_LOGIN_URL" >> $GITHUB_ENV
          echo "TARGET_PORTAL_CALLBACK_URL=$V_TARGET_PORTAL_CALLBACK_URL" >> $GITHUB_ENV
          echo "TARGET_PORTAL_LOGO_URL=$V_TARGET_PORTAL_LOGO_URL" >> $GITHUB_ENV
          echo "TARGET_PORTAL_BASE_URL_SLASH=$V_TARGET_PORTAL_BASE_URL_SLASH" >> $GITHUB_ENV
          echo "TARGET_PORTAL_BASE_URL_NOSLASH=$V_TARGET_PORTAL_BASE_URL_NOSLASH" >> $GITHUB_ENV
          echo "TARGET_FE_PORTAL_CALLBACK_EDGE_URL=$V_TARGET_FE_PORTAL_CALLBACK_EDGE_URL" >> $GITHUB_ENV
          echo "TARGET_FE_PORTAL_LOGIN_URL=$V_TARGET_FE_PORTAL_LOGIN_URL" >> $GITHUB_ENV
          echo "TARGET_FE_PORTAL_CALLBACK_URL=$V_TARGET_FE_PORTAL_CALLBACK_URL" >> $GITHUB_ENV
          echo "TARGET_FE_PORTAL_BASE_URL_SLASH=$V_TARGET_FE_PORTAL_BASE_URL_SLASH" >> $GITHUB_ENV
          echo "TARGET_FE_PORTAL_BASE_URL_NOSLASH=$V_TARGET_FE_PORTAL_BASE_URL_NOSLASH" >> $GITHUB_ENV
          echo "TARGET_AUTH0_MGMT_API_AUDIENCE=$V_TARGET_AUTH0_MGMT_API_AUDIENCE" >> $GITHUB_ENV
          echo "Target environment variables for keyword replacement have been set."

          # Part 4: Resource Selection Logic
          ALLOWED_RESOURCES=("actions" "clientGrants" "branding" "clients" "emailTemplates" "organizations" "pages" "prompts" "resourceServers" "roles" "tenant" "triggers")
          SELECTED_RESOURCES_INPUT_VAR="${{ github.event.inputs.include_resources_list }}" 
          FINAL_SELECTED_RESOURCES=()
          if [[ -z "$SELECTED_RESOURCES_INPUT_VAR" ]]; then
            FINAL_SELECTED_RESOURCES=("${ALLOWED_RESOURCES[@]}")
          elif [[ "$(echo "$SELECTED_RESOURCES_INPUT_VAR" | tr '[:upper:]' '[:lower:]')" == "none" ]]; then
            FINAL_SELECTED_RESOURCES=()
          else
            IFS=',' read -r -a INPUT_ARRAY <<< "$SELECTED_RESOURCES_INPUT_VAR"
            for resource_candidate in "${INPUT_ARRAY[@]}"; do
              trimmed_resource=$(echo "$resource_candidate" | xargs)
              is_allowed=false
              for allowed_item in "${ALLOWED_RESOURCES[@]}"; do
                if [[ "$trimmed_resource" == "$allowed_item" ]]; then FINAL_SELECTED_RESOURCES+=("$trimmed_resource"); is_allowed=true; break; fi
              done
              if [[ "$is_allowed" == false && -n "$trimmed_resource" ]]; then echo "WARNING: Resource '$trimmed_resource' from 'include_resources_list' is not allowed and will be ignored."; fi
            done
          fi
          INCLUDED_ONLY_JSON_PART=""
          if [ ${#FINAL_SELECTED_RESOURCES[@]} -gt 0 ]; then
            RESOURCES_JSON=$(printf '"%s",' "${FINAL_SELECTED_RESOURCES[@]}" | sed 's/,$//')
            INCLUDED_ONLY_JSON_PART=', "AUTH0_INCLUDED_ONLY": ['$RESOURCES_JSON']'
          else INCLUDED_ONLY_JSON_PART=', "AUTH0_INCLUDED_ONLY": []'; fi
          echo "AUTH0_INCLUDED_ONLY part: $INCLUDED_ONLY_JSON_PART"


          # Part 5: Construct the final KEYWORD_MAPPINGS_JSON_PART using the selected map structure
          KEYWORD_MAPPINGS_JSON_PART_VAR="" 
          if [[ -n "$SELECTED_KEYWORD_MAP_STRUCTURE_JSON" && "$SELECTED_KEYWORD_MAP_STRUCTURE_JSON" != "{}" && "$SELECTED_KEYWORD_MAP_STRUCTURE_JSON" != "null" ]]; then
            KEYWORD_MAPPINGS_JSON_PART_VAR=', "AUTH0_KEYWORD_REPLACE_MAPPINGS": '$SELECTED_KEYWORD_MAP_STRUCTURE_JSON
            echo "AUTH0_KEYWORD_REPLACE_MAPPINGS will use the structure from the secret selected for source $SOURCE_ENV_INPUT."
          else
            echo "Keyword map structure is empty for source $SOURCE_ENV_INPUT or not set. No keyword mappings will be applied from this map."
            KEYWORD_MAPPINGS_JSON_PART_VAR=', "AUTH0_KEYWORD_REPLACE_MAPPINGS": {}' 
          fi

          # Part 6: Create the target-config.json file
          TARGET_CONFIG_FILE="target-config.json"
          cat > $TARGET_CONFIG_FILE << EOF
          {
            "AUTH0_DOMAIN": "${{ env.TARGET_AUTH0_DOMAIN_ENVVAR }}",
            "AUTH0_CLIENT_ID": "${{ env.TARGET_AUTH0_CLIENT_ID_ENVVAR }}",
            "AUTH0_CLIENT_SECRET": "${{ env.TARGET_AUTH0_CLIENT_SECRET_ENVVAR }}",
            "AUTH0_ALLOW_DELETE": ${{ github.event.inputs.deletionMode == 'allow-deletion-with-confirmation' }}${INCLUDED_ONLY_JSON_PART}${KEYWORD_MAPPINGS_JSON_PART_VAR}
          }
          EOF
          echo "Generated $TARGET_CONFIG_FILE:"
          cat $TARGET_CONFIG_FILE
        env: 
          TARGET_AUTH0_DOMAIN_ENVVAR: ${{ secrets[format('AUTH0_DOMAIN_{0}', github.event.inputs.targetEnv)] }}
          TARGET_AUTH0_CLIENT_ID_ENVVAR: ${{ secrets[format('AUTH0_CLIENT_ID_{0}', github.event.inputs.targetEnv)] }}
          TARGET_AUTH0_CLIENT_SECRET_ENVVAR: ${{ secrets[format('AUTH0_CLIENT_SECRET_{0}', github.event.inputs.targetEnv)] }}

      - name: Export from Source Environment
        run: |
          mkdir -p auth0-export
          echo "Starting export from ${{ github.event.inputs.sourceEnv }}..."
          a0deploy export \
            --config_file=source-config.json \
            --format=${{ github.event.inputs.format }} \
            --output_folder=auth0-export \
            --debug
          echo "Export finished."
          ls -la auth0-export

      - name: Warning for Deletion Mode
        if: github.event.inputs.deletionMode == 'allow-deletion-with-confirmation' && github.event.inputs.operation_mode == 'import_to_target'
        run: |
          echo "⚠️ WARNING: DELETION MODE IS ENABLED FOR IMPORT ⚠️"
          echo "This operation MAY DELETE resources in the target environment: ${{ github.event.inputs.targetEnv }}"
          echo "Proceeding with import in 10 seconds. Press Ctrl+C to abort..."
          sleep 10
          echo "Proceeding with import operation..."

      - name: Import to Target Environment
        if: github.event.inputs.operation_mode == 'import_to_target'
        run: |
          echo "Starting import to ${{ github.event.inputs.targetEnv }}..."
          echo "The following TARGET_ environment variables are available for keyword replacement by a0deploy:"
          env | grep '^TARGET_' 
          
          if [ "${{ github.event.inputs.format }}" == "yaml" ]; then
            a0deploy import \
              --config_file=target-config.json \
              --input_file=auth0-export/tenant.yaml \
              --debug
          else 
            a0deploy import \
              --config_file=target-config.json \
              --input_file=auth0-export \
              --debug
          fi
          echo "Import finished."

      - name: Upload Target Config for Inspection
        if: github.event.inputs.operation_mode == 'prepare_config_for_download'
        uses: actions/upload-artifact@v4
        with:
          name: auth0-target-config-${{ github.event.inputs.targetEnv }}
          path: target-config.json
          if-no-files-found: error

      - name: Clean up sensitive files
        if: always()
        run: |
          echo "Cleaning up configuration files..."
          rm -f source-config.json target-config.json
          echo "Configuration files removed."
