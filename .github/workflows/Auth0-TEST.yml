name: Auth0 Migration TEST

on:
  workflow_dispatch:
    inputs:
      sourceEnv:
        description: 'Source Tenant (e.g., BDB_DEV, BDB_STAGING)'
        required: true
        type: choice
        options: # Ensure these match your secret naming convention (e.g., BDB_DEV)
          - BDB_EXPERIMENTAL
          - BDB_DEV
          - BDB_PREPROD
          - BDB_STAGING
          - BDB_PROD
      targetEnv:
        description: 'Target Tenant (e.g., BDB_PREPROD, BDB_PROD)'
        required: true
        type: choice
        options:
          - BDB_EXPERIMENTAL
          - BDB_DEV
          - BDB_PREPROD
          - BDB_STAGING
          - BDB_PROD
      format:
        description: 'Export/Import Format'
        required: true
        type: choice
        options:
          - yaml
          - directory
        default: 'yaml'
      include_resources_list:
        description: 'Comma-separated list of resources. Empty for all, "NONE" for none.'
        required: false
        type: string
        default: ''
      deletionMode:
        description: 'Deletion mode for target environment'
        required: true
        type: choice
        options:
          - no-deletion
          - allow-deletion-with-confirmation
        default: 'no-deletion'
      operation_mode:
        description: 'Operation to perform'
        required: true
        type: choice
        options:
          - import_to_target
          - prepare_config_for_download
          - preview_resolved_keyword_map # New option for dry run
        default: 'prepare_config_for_download'

jobs:
  migrate:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.targetEnv }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Auth0 Deploy CLI and jq
        run: |
          npm install -g auth0-deploy-cli
          sudo apt-get update && sudo apt-get install -y jq

      - name: Validate Environment Selection
        if: github.event.inputs.sourceEnv == github.event.inputs.targetEnv && (github.event.inputs.operation_mode == 'import_to_target' || github.event.inputs.operation_mode == 'preview_resolved_keyword_map')
        run: |
          echo "ERROR: Source and target environments cannot be the same for an import or preview operation!"
          exit 1

      - name: Create Source Config
        run: |
          cat > source-config.json << EOF
          {
            "AUTH0_DOMAIN": "${{ secrets[format('AUTH0_DOMAIN_{0}', github.event.inputs.sourceEnv)] }}",
            "AUTH0_CLIENT_ID": "${{ secrets[format('AUTH0_CLIENT_ID_{0}', github.event.inputs.sourceEnv)] }}",
            "AUTH0_CLIENT_SECRET": "${{ secrets[format('AUTH0_CLIENT_SECRET_{0}', github.event.inputs.sourceEnv)] }}"
          }
          EOF

      - name: Prepare Configuration and Environment Variables
        id: prepare_config
        run: |
          TARGET_ENV_INPUT="${{ github.event.inputs.targetEnv }}"
          SOURCE_ENV_INPUT="${{ github.event.inputs.sourceEnv }}"
          echo "Source Environment: $SOURCE_ENV_INPUT"
          echo "Target Environment: $TARGET_ENV_INPUT"

          # Part 1: Select the Source-Specific Keyword Map Structure JSON
          if [[ -z "$SELECTED_KEYWORD_MAP_STRUCTURE_JSON" ]]; then
             case "$SOURCE_ENV_INPUT" in
                "BDB_DEV") SELECTED_KEYWORD_MAP_STRUCTURE_JSON='${{ secrets.AUTH0_KEYWORD_MAP_FROM_BDB_DEV }}' ;;
                "BDB_EXPERIMENTAL") SELECTED_KEYWORD_MAP_STRUCTURE_JSON='${{ secrets.AUTH0_KEYWORD_MAP_FROM_BDB_EXPERIMENTAL }}' ;;
                "BDB_STAGING") SELECTED_KEYWORD_MAP_STRUCTURE_JSON='${{ secrets.AUTH0_KEYWORD_MAP_FROM_BDB_STAGING }}' ;;
                "BDB_PREPROD") SELECTED_KEYWORD_MAP_STRUCTURE_JSON='${{ secrets.AUTH0_KEYWORD_MAP_FROM_BDB_PREPROD }}' ;; # Or BDB_PREPROD if you changed it
                "BDB_PROD") SELECTED_KEYWORD_MAP_STRUCTURE_JSON='${{ secrets.AUTH0_KEYWORD_MAP_FROM_BDB_PROD }}' ;;
                *) echo "WARNING: No specific keyword map structure secret logic for source '$SOURCE_ENV_INPUT'."; SELECTED_KEYWORD_MAP_STRUCTURE_JSON='{}' ;;
             esac
          fi

          if [[ -z "$SELECTED_KEYWORD_MAP_STRUCTURE_JSON" || "$SELECTED_KEYWORD_MAP_STRUCTURE_JSON" == "null" ]]; then
            echo "Keyword map structure for source '$SOURCE_ENV_INPUT' is not set or empty. Defaulting to no keyword replacements from map."
            SELECTED_KEYWORD_MAP_STRUCTURE_JSON='{}'
          fi
          echo "Selected Keyword Map Structure (first 100 chars): $(echo "$SELECTED_KEYWORD_MAP_STRUCTURE_JSON" | cut -c 1-100)"
          # Output this for the preview step
          echo "SELECTED_KEYWORD_MAP_STRUCTURE_JSON_CONTENT<<EOF" >> $GITHUB_OUTPUT
          echo "$SELECTED_KEYWORD_MAP_STRUCTURE_JSON" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT


          # Part 2: Select Target-Specific URL Definitions JSON
          # This secret maps ##TARGET_PLACEHOLDER## to actual target URLs
          TARGET_URLS_SECRET_NAME="AUTH0_TARGET_URLS_FOR_${TARGET_ENV_INPUT}"
          TARGET_URL_DEFINITIONS_JSON='${{ secrets[TARGET_URLS_SECRET_NAME] }}'
           # Fallback for older GitHub Actions syntax
          if [[ -z "$TARGET_URL_DEFINITIONS_JSON" ]]; then
             case "$TARGET_ENV_INPUT" in
                "BDB_DEV") TARGET_URL_DEFINITIONS_JSON='${{ secrets.AUTH0_TARGET_URLS_FOR_BDB_DEV }}' ;;
                "BDB_EXPERIMENTAL") TARGET_URL_DEFINITIONS_JSON='${{ secrets.AUTH0_TARGET_URLS_FOR_BDB_EXPERIMENTAL }}' ;;
                "BDB_STAGING") TARGET_URL_DEFINITIONS_JSON='${{ secrets.AUTH0_TARGET_URLS_FOR_BDB_STAGING }}' ;;
                "BDB_PREPROD") TARGET_URL_DEFINITIONS_JSON='${{ secrets.AUTH0_TARGET_URLS_FOR_BDB_PREPROD }}' ;;
                "BDB_PROD") TARGET_URL_DEFINITIONS_JSON='${{ secrets.AUTH0_TARGET_URLS_FOR_BDB_PROD }}' ;;
                *) echo "ERROR: No target URL definitions secret logic for target '$TARGET_ENV_INPUT'."; exit 1 ;;
             esac
          fi

          if [[ -z "$TARGET_URL_DEFINITIONS_JSON" || "$TARGET_URL_DEFINITIONS_JSON" == "null" ]]; then
            echo "ERROR: Target URL definitions for target '$TARGET_ENV_INPUT' are not set or empty."
            exit 1
          fi
          echo "Target URL Definitions JSON (first 100 chars): $(echo "$TARGET_URL_DEFINITIONS_JSON" | cut -c 1-100)"
          # Output this for the preview step
          echo "TARGET_URL_DEFINITIONS_JSON_CONTENT<<EOF" >> $GITHUB_OUTPUT
          echo "$TARGET_URL_DEFINITIONS_JSON" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Part 3: Parse Target URL Definitions and Export Environment Variables for a0deploy
          # These environment variables (e.g., TARGET_DOCGEN_URL) will be used by a0deploy to resolve ##PLACEHOLDERS##
          echo "Setting environment variables for Auth0 Deploy CLI keyword replacement..."
          echo "$TARGET_URL_DEFINITIONS_JSON" | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while IFS='=' read -r key value; do
            if [[ -n "$key" && -n "$value" ]]; then
              echo "Exporting $key=$value"
              echo "$key=$value" >> $GITHUB_ENV
            fi
          done
          echo "Target environment variables for keyword replacement have been set from secret."

          # Part 4: Resource Selection Logic
          ALLOWED_RESOURCES=("actions" "clientGrants" "branding" "clients" "emailTemplates" "organizations" "pages" "prompts" "resourceServers" "roles" "tenant" "triggers")
          SELECTED_RESOURCES_INPUT_VAR="${{ github.event.inputs.include_resources_list }}"
          FINAL_SELECTED_RESOURCES=()
          if [[ -z "$SELECTED_RESOURCES_INPUT_VAR" ]]; then
            FINAL_SELECTED_RESOURCES=("${ALLOWED_RESOURCES[@]}")
          elif [[ "$(echo "$SELECTED_RESOURCES_INPUT_VAR" | tr '[:upper:]' '[:lower:]')" == "none" ]]; then
            FINAL_SELECTED_RESOURCES=()
          else
            IFS=',' read -r -a INPUT_ARRAY <<< "$SELECTED_RESOURCES_INPUT_VAR"
            for resource_candidate in "${INPUT_ARRAY[@]}"; do
              trimmed_resource=$(echo "$resource_candidate" | xargs)
              is_allowed=false
              for allowed_item in "${ALLOWED_RESOURCES[@]}"; do
                if [[ "$trimmed_resource" == "$allowed_item" ]]; then FINAL_SELECTED_RESOURCES+=("$trimmed_resource"); is_allowed=true; break; fi
              done
              if [[ "$is_allowed" == false && -n "$trimmed_resource" ]]; then echo "WARNING: Resource '$trimmed_resource' from 'include_resources_list' is not allowed and will be ignored."; fi
            done
          fi
          INCLUDED_ONLY_JSON_PART=""
          if [ ${#FINAL_SELECTED_RESOURCES[@]} -gt 0 ]; then
            RESOURCES_JSON=$(printf '"%s",' "${FINAL_SELECTED_RESOURCES[@]}" | sed 's/,$//')
            INCLUDED_ONLY_JSON_PART=', "AUTH0_INCLUDED_ONLY": ['$RESOURCES_JSON']'
          else INCLUDED_ONLY_JSON_PART=', "AUTH0_INCLUDED_ONLY": []'; fi
          echo "AUTH0_INCLUDED_ONLY part: $INCLUDED_ONLY_JSON_PART"


          # Part 5: Construct the final KEYWORD_MAPPINGS_JSON_PART using the selected source map structure
          KEYWORD_MAPPINGS_JSON_PART_VAR=""
          if [[ -n "$SELECTED_KEYWORD_MAP_STRUCTURE_JSON" && "$SELECTED_KEYWORD_MAP_STRUCTURE_JSON" != "{}" && "$SELECTED_KEYWORD_MAP_STRUCTURE_JSON" != "null" ]]; then
            KEYWORD_MAPPINGS_JSON_PART_VAR=', "AUTH0_KEYWORD_REPLACE_MAPPINGS": '$SELECTED_KEYWORD_MAP_STRUCTURE_JSON
            echo "AUTH0_KEYWORD_REPLACE_MAPPINGS will use the structure from the secret selected for source $SOURCE_ENV_INPUT."
          else
            echo "Keyword map structure is empty for source $SOURCE_ENV_INPUT or not set. No keyword mappings will be applied from this map."
            KEYWORD_MAPPINGS_JSON_PART_VAR=', "AUTH0_KEYWORD_REPLACE_MAPPINGS": {}'
          fi

          # Part 6: Create the target-config.json file
          TARGET_CONFIG_FILE="target-config.json"
          cat > $TARGET_CONFIG_FILE << EOF
          {
            "AUTH0_DOMAIN": "${{ env.TARGET_AUTH0_DOMAIN_ENVVAR }}",
            "AUTH0_CLIENT_ID": "${{ env.TARGET_AUTH0_CLIENT_ID_ENVVAR }}",
            "AUTH0_CLIENT_SECRET": "${{ env.TARGET_AUTH0_CLIENT_SECRET_ENVVAR }}",
            "AUTH0_ALLOW_DELETE": ${{ github.event.inputs.deletionMode == 'allow-deletion-with-confirmation' }}${INCLUDED_ONLY_JSON_PART}${KEYWORD_MAPPINGS_JSON_PART_VAR}
          }
          EOF
          echo "Generated $TARGET_CONFIG_FILE:"
          cat $TARGET_CONFIG_FILE
        env:
          TARGET_AUTH0_DOMAIN_ENVVAR: ${{ secrets[format('AUTH0_DOMAIN_{0}', github.event.inputs.targetEnv)] }}
          TARGET_AUTH0_CLIENT_ID_ENVVAR: ${{ secrets[format('AUTH0_CLIENT_ID_{0}', github.event.inputs.targetEnv)] }}
          TARGET_AUTH0_CLIENT_SECRET_ENVVAR: ${{ secrets[format('AUTH0_CLIENT_SECRET_{0}', github.event.inputs.targetEnv)] }}

      - name: Export from Source Environment
        # This step is needed for import and preview
        if: github.event.inputs.operation_mode == 'import_to_target' || github.event.inputs.operation_mode == 'preview_resolved_keyword_map'
        run: |
          mkdir -p auth0-export
          echo "Starting export from ${{ github.event.inputs.sourceEnv }}..."
          a0deploy export \
            --config_file=source-config.json \
            --format=${{ github.event.inputs.format }} \
            --output_folder=auth0-export \
            --debug
          echo "Export finished."
          ls -la auth0-export

      - name: Preview Resolved Keyword Map
        if: github.event.inputs.operation_mode == 'preview_resolved_keyword_map'
        run: |
          echo "Generating preview of resolved keyword replacements..."
          SOURCE_MAP_JSON='${{ steps.prepare_config.outputs.SELECTED_KEYWORD_MAP_STRUCTURE_JSON_CONTENT }}'
          TARGET_URLS_JSON='${{ steps.prepare_config.outputs.TARGET_URL_DEFINITIONS_JSON_CONTENT }}'
          
          if [[ -z "$SOURCE_MAP_JSON" || "$SOURCE_MAP_JSON" == "{}" || -z "$TARGET_URLS_JSON" || "$TARGET_URLS_JSON" == "{}" ]]; then
            echo "Cannot generate preview: Source map or target URL definitions are empty."
            exit 0 # Exit gracefully, not an error for preview if maps are empty
          fi

          echo "---------------------------------------------------------------------"
          echo "PREVIEW: The following replacements would be attempted by a0deploy:"
          echo "---------------------------------------------------------------------"
          
          # Use jq to iterate through the source map and resolve placeholders using the target URLs
          echo "$SOURCE_MAP_JSON" | jq -r 'to_entries[] | "\(.key) /// \(.value)"' | while IFS=' /// ' read -r source_url placeholder_value; do
            if [[ "$placeholder_value" == ##*## ]]; then
              # Extract placeholder name, e.g., from "##TARGET_DOCGEN_URL##" to "TARGET_DOCGEN_URL"
              placeholder_name=$(echo "$placeholder_value" | sed 's/^##//;s/##$//')
              # Look up this placeholder name in the target URLs JSON
              actual_target_url=$(echo "$TARGET_URLS_JSON" | jq -r --arg ph_name "$placeholder_name" '.[$ph_name]')
              
              if [[ -n "$actual_target_url" && "$actual_target_url" != "null" ]]; then
                echo "Replace SOURCE: \"$source_url\""
                echo "   with TARGET: \"$actual_target_url\""
                echo ""
              else
                echo "WARNING: Placeholder \"$placeholder_value\" for source \"$source_url\" could not be resolved in target URL definitions."
              fi
            else
              # This case should ideally not happen if source maps always use placeholders
              echo "INFO: Source \"$source_url\" is mapped to a non-placeholder value \"$placeholder_value\"."
            fi
          done
          echo "---------------------------------------------------------------------"
          echo "Preview finished. If running actual import, a0deploy will use environment variables for these."
          # For a more advanced preview, you would apply these replacements to a copy of auth0-export/tenant.yaml
          # For now, this shows the mapping.
        
      - name: Warning for Deletion Mode
        if: github.event.inputs.deletionMode == 'allow-deletion-with-confirmation' && github.event.inputs.operation_mode == 'import_to_target'
        run: |
          echo "⚠️ WARNING: DELETION MODE IS ENABLED FOR IMPORT ⚠️"
          # ... (rest of warning)

      - name: Import to Target Environment
        if: github.event.inputs.operation_mode == 'import_to_target'
        run: |
          echo "Here should be the import..."

      - name: Upload Target Config for Inspection
        if: github.event.inputs.operation_mode == 'prepare_config_for_download'
        uses: actions/upload-artifact@v4
        with:
          name: auth0-target-config-${{ github.event.inputs.targetEnv }}
          path: target-config.json
          if-no-files-found: error

      - name: Clean up sensitive files
        if: always()
        run: |
          echo "Cleaning up configuration files..."
          rm -f source-config.json target-config.json
          echo "Configuration files removed."
