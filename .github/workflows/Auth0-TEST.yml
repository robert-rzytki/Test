name: Auth0 Environment Migration TEST

on:
  workflow_dispatch:
    inputs:
      sourceEnv:
        description: 'Source Tenant'
        required: true
        type: choice
        options:
          - bdbexperimental
          - bdbdev
          - bdbpreprod
          - bdbstaging
          - bdbprod
      targetEnv:
        description: 'Target Tenant'
        required: true
        type: choice
        options:
          - bdbexperimental
          - bdbdev
          - bdbpreprod
          - bdbstaging
          - bdbprod
      format:
        description: 'Export/Import Format'
        required: true
        type: choice
        options:
          - yaml
          - directory
        default: 'yaml'
      include_resources_list:
        description: 'Comma-separated list of resources (actions,clients,roles,etc.). Empty for all, "NONE" for none.'
        required: false
        type: string
        default: '' # Default to empty, meaning all allowed resources
      deletionMode:
        description: 'Deletion mode for target environment'
        required: true
        type: choice
        options:
          - no-deletion
          - allow-deletion-with-confirmation
        default: 'no-deletion'
      operation_mode:
        description: 'Operation to perform'
        required: true
        type: choice
        options:
          - import_to_target
          - prepare_config_for_download
        default: 'prepare_config_for_download'

jobs:
  migrate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Updated to v4

      - name: Set up Node.js
        uses: actions/setup-node@v4 # Updated to v4
        with:
          node-version: '18' # LTS version

      - name: Install Auth0 Deploy CLI and jq
        run: |
          npm install -g auth0-deploy-cli
          sudo apt-get update && sudo apt-get install -y jq

      - name: Validate Environment Selection
        if: github.event.inputs.sourceEnv == github.event.inputs.targetEnv
        run: |
          echo "ERROR: Source and target environments cannot be the same!"
          exit 1

      - name: Create Source Config
        run: |
          cat > source-config.json << EOF
          {
            "AUTH0_DOMAIN": "${{ secrets[format('AUTH0_DOMAIN_{0}', upper(github.event.inputs.sourceEnv))] }}",
            "AUTH0_CLIENT_ID": "${{ secrets[format('AUTH0_CLIENT_ID_{0}', upper(github.event.inputs.sourceEnv))] }}",
            "AUTH0_CLIENT_SECRET": "${{ secrets[format('AUTH0_CLIENT_SECRET_{0}', upper(github.event.inputs.sourceEnv))] }}"
          }
          EOF
        # Ensure you have secrets like AUTH0_DOMAIN_BDBDEV, AUTH0_CLIENT_ID_BDBDEV, etc.

      - name: Create Target Config with Dynamic Keyword Mapping
        id: create_target_config
        run: |
          # --- Resource Selection Logic ---
          ALLOWED_RESOURCES=("actions" "clientGrants" "branding" "clients" "emailTemplates" "organizations" "pages" "prompts" "resourceServers" "roles" "tenant" "triggers")
          SELECTED_RESOURCES_INPUT="${{ github.event.inputs.include_resources_list }}"
          FINAL_SELECTED_RESOURCES=()

          if [[ -z "$SELECTED_RESOURCES_INPUT" ]]; then
            echo "No specific resources listed, defaulting to all allowed resources."
            FINAL_SELECTED_RESOURCES=("${ALLOWED_RESOURCES[@]}")
          elif [[ "$(echo "$SELECTED_RESOURCES_INPUT" | tr '[:upper:]' '[:lower:]')" == "none" ]]; then
            echo "'include_resources_list' is 'NONE', no specific resources will be included."
            FINAL_SELECTED_RESOURCES=()
          else
            echo "Processing 'include_resources_list': $SELECTED_RESOURCES_INPUT"
            IFS=',' read -r -a INPUT_ARRAY <<< "$SELECTED_RESOURCES_INPUT"
            for resource_candidate in "${INPUT_ARRAY[@]}"; do
              trimmed_resource=$(echo "$resource_candidate" | xargs)
              is_allowed=false
              for allowed_item in "${ALLOWED_RESOURCES[@]}"; do
                if [[ "$trimmed_resource" == "$allowed_item" ]]; then
                  FINAL_SELECTED_RESOURCES+=("$trimmed_resource")
                  is_allowed=true
                  break
                fi
              done
              if [[ "$is_allowed" == false && -n "$trimmed_resource" ]]; then
                echo "WARNING: Resource '$trimmed_resource' from 'include_resources_list' is not allowed and will be ignored."
              fi
            done
          fi

          INCLUDED_ONLY_JSON_PART=""
          if [ ${#FINAL_SELECTED_RESOURCES[@]} -gt 0 ]; then
            RESOURCES_JSON=$(printf '"%s",' "${FINAL_SELECTED_RESOURCES[@]}" | sed 's/,$//')
            INCLUDED_ONLY_JSON_PART=', "AUTH0_INCLUDED_ONLY": ['$RESOURCES_JSON']'
            echo "AUTH0_INCLUDED_ONLY will be: [${RESOURCES_JSON}]"
          else
            INCLUDED_ONLY_JSON_PART=', "AUTH0_INCLUDED_ONLY": []'
            echo "AUTH0_INCLUDED_ONLY will be an empty list."
          fi
          # --- End of Resource Selection Logic ---

          # --- Dynamic Keyword Map Processing Logic ---
          TEMPLATE_MAP_JSON='${{ secrets.AUTH0_KEYWORD_CONFIG_MAP_TEMPLATE }}'
          TARGET_ENV_INPUT="${{ github.event.inputs.targetEnv }}"
          PROCESSED_MAP_JSON="{}" # Default to an empty JSON object

          if [[ -z "$TEMPLATE_MAP_JSON" || "$TEMPLATE_MAP_JSON" == "null" || "$TEMPLATE_MAP_JSON" == "{}" ]]; then
            echo "Template keyword map secret (AUTH0_KEYWORD_CONFIG_MAP_TEMPLATE) is empty, not set, or an empty JSON object. No dynamic keyword mappings will be processed."
            if [[ "$TEMPLATE_MAP_JSON" == "{}" ]]; then PROCESSED_MAP_JSON="{}"; fi
          else
            echo "Processing templated keyword map for target environment: $TARGET_ENV_INPUT"
            
            # Define replacement strings based on target environment
            # IMPORTANT: Customize this 'case' statement for YOUR environment names (inputs.targetEnv values)
            case "$TARGET_ENV_INPUT" in
              "bdbdev") # Assuming dev is the source, or if migrating dev to another dev-like tenant
                T_ENV_PREFIX_DOT="dev."
                T_ENV_STRING_NODOT="dev"
                ;;
              "bdbexperimental")
                T_ENV_PREFIX_DOT="experimental."
                T_ENV_STRING_NODOT="experimental"
                ;;
              "bdbstage") # Example for a 'stage' environment
                T_ENV_PREFIX_DOT="stage."
                T_ENV_STRING_NODOT="stage"
                ;;
              "bdbpreprod")
                T_ENV_PREFIX_DOT="preprod."
                T_ENV_STRING_NODOT="preprod"
                ;;
              "bdbprod")
                T_ENV_PREFIX_DOT=""  # For 'https://dev.foo.com' -> 'https://foo.com'
                T_ENV_STRING_NODOT=""  # For '...dev...' -> '...' (e.g., 'bedev' -> 'be')
                ;;
              *)
                echo "WARNING: Unknown targetEnv '$TARGET_ENV_INPUT' for keyword map. Placeholders will use 'unknown' values."
                T_ENV_PREFIX_DOT="unknown-$TARGET_ENV_INPUT." 
                T_ENV_STRING_NODOT="unknown-$TARGET_ENV_INPUT"
                ;;
            esac

            echo "Using jq to process template with: ENV_PREFIX_DOT='$T_ENV_PREFIX_DOT', ENV_STRING_NODOT='$T_ENV_STRING_NODOT'"
            PROCESSED_MAP_JSON=$(echo "$TEMPLATE_MAP_JSON" | \
              jq --arg t_env_prefix_dot "$T_ENV_PREFIX_DOT" \
                 --arg t_env_string_nodot "$T_ENV_STRING_NODOT" \
                 'walk(if type == "string" then 
                         gsub("{{ENV_PREFIX_DOT}}"; $t_env_prefix_dot) | 
                         gsub("{{ENV_STRING_NODOT}}"; $t_env_string_nodot)
                       else . end)'
            )
        
            if [[ -z "$PROCESSED_MAP_JSON" || "$PROCESSED_MAP_JSON" == "null" ]]; then
                echo "WARNING: Processed keyword map is empty or null after substitutions by jq. Check template and jq processing."
                PROCESSED_MAP_JSON="{}"
            fi
            echo "Dynamically Processed Keyword Map: $PROCESSED_MAP_JSON"
          fi

          KEYWORD_MAPPINGS_JSON_PART=""
          if [[ -n "$PROCESSED_MAP_JSON" && "$PROCESSED_MAP_JSON" != "{}" && "$PROCESSED_MAP_JSON" != "null" ]]; then
            KEYWORD_MAPPINGS_JSON_PART=', "AUTH0_KEYWORD_REPLACE_MAPPINGS": '$PROCESSED_MAP_JSON
            echo "Keyword mappings will be applied using the dynamically processed map."
          elif [[ "$PROCESSED_MAP_JSON" == "{}" ]]; then # Handle case where map is intentionally an empty JSON object
            KEYWORD_MAPPINGS_JSON_PART=', "AUTH0_KEYWORD_REPLACE_MAPPINGS": {}'
            echo "An empty keyword map {} will be included in the Auth0 config (no keyword replacements from this map)."
          else
            echo "No keyword mappings will be applied (processed map is empty or null, and not explicitly an empty JSON object)."
          fi
          # --- End of Dynamic Keyword Map Processing Logic ---

          # Create the target-config.json file
          TARGET_CONFIG_FILE="target-config.json"
          cat > $TARGET_CONFIG_FILE << EOF
          {
            "AUTH0_DOMAIN": "${{ env.TARGET_AUTH0_DOMAIN }}",
            "AUTH0_CLIENT_ID": "${{ env.TARGET_AUTH0_CLIENT_ID }}",
            "AUTH0_CLIENT_SECRET": "${{ env.TARGET_AUTH0_CLIENT_SECRET }}",
            "AUTH0_ALLOW_DELETE": ${{ github.event.inputs.deletionMode == 'allow-deletion-with-confirmation' }}${INCLUDED_ONLY_JSON_PART}${KEYWORD_MAPPINGS_JSON_PART}
          }
          EOF
          echo "Generated $TARGET_CONFIG_FILE:"
          cat $TARGET_CONFIG_FILE
        env:
          TARGET_AUTH0_DOMAIN: ${{ secrets[format('AUTH0_DOMAIN_{0}', upper(github.event.inputs.targetEnv))] }}
          TARGET_AUTH0_CLIENT_ID: ${{ secrets[format('AUTH0_CLIENT_ID_{0}', upper(github.event.inputs.targetEnv))] }}
          TARGET_AUTH0_CLIENT_SECRET: ${{ secrets[format('AUTH0_CLIENT_SECRET_{0}', upper(github.event.inputs.targetEnv))] }}

      - name: Export from Source Environment
        run: |
          mkdir -p auth0-export
          echo "Starting export from ${{ github.event.inputs.sourceEnv }}..."
          a0deploy export \
            --config_file=source-config.json \
            --format=${{ github.event.inputs.format }} \
            --output_folder=auth0-export \
            --debug
          echo "Export finished."
          ls -la auth0-export

      - name: Warning for Deletion Mode
        if: github.event.inputs.deletionMode == 'allow-deletion-with-confirmation' && github.event.inputs.operation_mode == 'import_to_target'
        run: |
          echo "⚠️ WARNING: DELETION MODE IS ENABLED FOR IMPORT ⚠️"
          echo "This operation MAY DELETE resources in the target environment: ${{ github.event.inputs.targetEnv }}"
          echo "Proceeding with import in 10 seconds. Press Ctrl+C to abort..."
          sleep 10
          echo "Proceeding with import operation..."

      - name: Import to Target Environment
        if: github.event.inputs.operation_mode == 'import_to_target'
        run: |
          echo "Starting import to ${{ github.event.inputs.targetEnv }}..."
          if [ "${{ github.event.inputs.format }}" == "yaml" ]; then
            a0deploy import \
              --config_file=target-config.json \
              --input_file=auth0-export/tenant.yaml \
              --debug
          else # format == 'directory'
            a0deploy import \
              --config_file=target-config.json \
              --input_file=auth0-export \
              --debug
          fi
          echo "Import finished."

      - name: Upload Target Config for Inspection
        if: github.event.inputs.operation_mode == 'prepare_config_for_download'
        uses: actions/upload-artifact@v4
        with:
          name: auth0-target-config-${{ github.event.inputs.targetEnv }}
          path: target-config.json
          if-no-files-found: error

      - name: Clean up sensitive files
        if: always()
        run: |
          echo "Cleaning up configuration files..."
          rm -f source-config.json target-config.json
          echo "Configuration files removed."
