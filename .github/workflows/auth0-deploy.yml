name: Auth0 Environment Migration

on:
  workflow_dispatch:
    inputs:
      sourceEnv:
        description: 'Source Auth0 Environment'
        required: true
        type: choice
        options:
          - dev
          - test
          - staging
          - production
      targetEnv:
        description: 'Target Auth0 Environment'
        required: true
        type: choice
        options:
          - dev
          - test
          - staging
          - production
      format:
        description: 'Export/Import Format'
        required: true
        type: choice
        options:
          - yaml
          - directory
        default: 'yaml'
      selectionMode:
        description: 'Resource Selection Mode'
        required: true
        type: choice
        options:
          - all
          - include only
          - exclude only
        default: 'all'
      identityResources:
        description: 'Identity Resources (connections, databases, organizations, roles)'
        required: false
        type: boolean
        default: false
      applicationResources:
        description: 'Application Resources (clients, client grants, resource servers)'
        required: false
        type: boolean
        default: false
      securityResources:
        description: 'Security Resources (attack protection, guardian factors)'
        required: false
        type: boolean
        default: false
      customizationResources:
        description: 'Customization Resources (branding, pages, prompts, email templates)'
        required: false
        type: boolean
        default: false
      actionResources:
        description: 'Action Resources (actions, triggers)'
        required: false
        type: boolean
        default: false
      allowDelete:
        description: 'Allow deletion of resources in target environment'
        required: true
        type: boolean
        default: false

jobs:
  migrate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Auth0 Deploy CLI
        run: npm install -g auth0-deploy-cli

      - name: Validate Environment Selection
        if: github.event.inputs.sourceEnv == github.event.inputs.targetEnv
        run: |
          echo "Source and target environments cannot be the same!"
          exit 1

      - name: Create Source Config
        run: |
          cat > source-config.json << EOF
          {
            "AUTH0_DOMAIN": "${{ secrets[format('AUTH0_DOMAIN_{0}', github.event.inputs.sourceEnv)] }}",
            "AUTH0_CLIENT_ID": "${{ secrets[format('AUTH0_CLIENT_ID_{0}', github.event.inputs.sourceEnv)] }}",
            "AUTH0_CLIENT_SECRET": "${{ secrets[format('AUTH0_CLIENT_SECRET_{0}', github.event.inputs.sourceEnv)] }}"
          }
          EOF

      - name: Create Target Config
        run: |
          # Initialize arrays for selected resources
          SELECTED_RESOURCES=()
          
          # Check which resource groups are selected and add their resources
          if [[ "${{ github.event.inputs.identityResources }}" == "true" ]]; then
            SELECTED_RESOURCES+=("connections" "databases" "organizations" "roles")
          fi
          
          if [[ "${{ github.event.inputs.applicationResources }}" == "true" ]]; then
            SELECTED_RESOURCES+=("clients" "clientGrants" "resourceServers")
          fi
          
          if [[ "${{ github.event.inputs.securityResources }}" == "true" ]]; then
            SELECTED_RESOURCES+=("attackProtection" "guardianFactors" "guardianFactorProviders" "guardianFactorTemplates" "guardianPolicies")
          fi
          
          if [[ "${{ github.event.inputs.customizationResources }}" == "true" ]]; then
            SELECTED_RESOURCES+=("branding" "pages" "prompts" "emailTemplates" "emailProvider" "customDomains")
          fi
          
          if [[ "${{ github.event.inputs.actionResources }}" == "true" ]]; then
            SELECTED_RESOURCES+=("actions" "triggers")
          fi
          
          # Check if any resources are selected
          if [ ${#SELECTED_RESOURCES[@]} -eq 0 ] || [[ "${{ github.event.inputs.selectionMode }}" == "all" ]]; then
            # If no resources selected or mode is "all", don't specify any resource filter
            MODE_JSON=""
            echo "Using all resources (no filtering)"
          else
            # Create JSON array from selected resources
            RESOURCES_JSON=$(printf '"%s",' "${SELECTED_RESOURCES[@]}" | sed 's/,$//')
            
            # Apply the selection mode
            if [[ "${{ github.event.inputs.selectionMode }}" == "include_only" ]]; then
              MODE_JSON=', "AUTH0_INCLUDED_ONLY": ['$RESOURCES_JSON']'
              echo "Including only: ${SELECTED_RESOURCES[*]}"
            elif [[ "${{ github.event.inputs.selectionMode }}" == "exclude_only" ]]; then
              MODE_JSON=', "AUTH0_EXCLUDED": ['$RESOURCES_JSON']'
              echo "Excluding: ${SELECTED_RESOURCES[*]}"
            else
              MODE_JSON=""
            fi
          fi
          
          # Create the final config file
          cat > target-config.json << EOF
          {
            "AUTH0_DOMAIN": "${{ secrets[format('AUTH0_DOMAIN_{0}', github.event.inputs.targetEnv)] }}",
            "AUTH0_CLIENT_ID": "${{ secrets[format('AUTH0_CLIENT_ID_{0}', github.event.inputs.targetEnv)] }}",
            "AUTH0_CLIENT_SECRET": "${{ secrets[format('AUTH0_CLIENT_SECRET_{0}', github.event.inputs.targetEnv)] }}",
            "AUTH0_ALLOW_DELETE": ${{ github.event.inputs.allowDelete }}${MODE_JSON}
          }
          EOF

      - name: Export from Source Environment
        run: |
          mkdir -p auth0-export
          a0deploy export \
            --config_file=source-config.json \
            --format=${{ github.event.inputs.format }} \
            --output_folder=auth0-export \
            --debug

      - name: Import to Target Environment
        run: |
          if [ "${{ github.event.inputs.format }}" == "yaml" ]; then
            a0deploy import \
              --config_file=target-config.json \
              --input_file=auth0-export/tenant.yaml \
              --debug
          else
            a0deploy import \
              --config_file=target-config.json \
              --input_file=auth0-export \
              --debug
          fi

      - name: Clean up sensitive files
        if: always()
        run: |
          rm -f source-config.json target-config.json
