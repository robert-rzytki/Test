name: Storyblok Migrate Specific Items

on:
  workflow_dispatch:
    inputs:
      source_space_name:
        description: 'Source Space Name (e.g., dev_bdb-portal). Ensure corresponding STORYBLOK_SPACE_ID_XXX secret is set.'
        required: true
        type: choice
        options: 
          - dev_bdb-portal
          - stage_bdb-portal
          - preprod_bdb-portal
          - prod_bdb-portal
      target_space_name:
        description: 'Target Space Name (e.g., stage_bdb-portal). Ensure corresponding STORYBLOK_SPACE_ID_XXX secret is set.'
        required: true
        type: choice
        options: 
          - dev_bdb-portal
          - stage_bdb-portal
          - preprod_bdb-portal
          - prod_bdb-portal
      item_type:
        description: 'Type of item(s) to migrate.'
        required: true
        type: choice
        options:
          - components
          - datasources
          - stories
          - folders
          - roles
      item_names:
        description: 'Comma-separated names/slugs of items to migrate (e.g., my-component,global-data,about-us-story). For stories/folders, use slug/path.'
        required: true
        type: string

jobs:
  migrate_storyblok_items:
    name: Migrate Specific Storyblok Items
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Or your preferred LTS Node.js version

      - name: Install Storyblok CLI
        run: npm install -g storyblok

      - name: Authenticate with Storyblok
        run: storyblok login --token ${{ secrets.STORYBLOK_PERSONAL_ACCESS_TOKEN }} --region eu

      - name: Prepare and Execute Migration
        env:
          DEV_ENV: ${{ secrets.STORYBLOK_SPACE_ID_DEV }}
          STAGE_ENV: ${{ secrets.STORYBLOK_SPACE_ID_STAGE }}
          PREPROD_ENV: ${{ secrets.STORYBLOK_SPACE_ID_PREPROD }}
          PROD_ENV: ${{ secrets.STORYBLOK_SPACE_ID_PROD }}

          # Inputs from the workflow_dispatch event
          INPUT_SOURCE_NAME: ${{ github.event.inputs.source_space_name }}
          INPUT_TARGET_NAME: ${{ github.event.inputs.target_space_name }}
          INPUT_ITEM_TYPE: ${{ github.event.inputs.item_type }}
          INPUT_ITEM_NAMES_CSV: ${{ github.event.inputs.item_names }}
        run: |
          echo "Starting Storyblok item migration process..."

          # Function to map selected space names to the environment variable that holds the actual Space ID
          # This structure is borrowed from your provided storyblok-sync.yml
          get_env_var_for_space_id() {
            local space_name_input="$1"
            local env_var_name_for_id=""
            # This case statement maps the dropdown choice to the environment variable name holding the ID
            case "$space_name_input" in
              "dev_bdb-portal") env_var_name_for_id="DEV_ENV" ;;
              "stage_bdb-portal") env_var_name_for_id="STAGE_ENV" ;;
              "preprod_bdb-portal") env_var_name_for_id="PREPROD_ENV" ;;
              "prod_bdb-portal") env_var_name_for_id="PROD_ENV" ;;
              *)
                echo "Error: Unknown space name '$space_name_input' provided." >&2
                echo "Cannot map to a Space ID environment variable. Please check the workflow 'options' and this script's 'case' statement." >&2
                exit 1
                ;;
            esac
            echo "$env_var_name_for_id"
          }

          # Resolve Source Space ID from the corresponding secret
          SOURCE_SPACE_ID_ENV_VAR_NAME=$(get_env_var_for_space_id "$INPUT_SOURCE_NAME")
          SOURCE_SPACE_ID="${!SOURCE_SPACE_ID_ENV_VAR_NAME}" # Indirect expansion to get the secret's value
          if [ -z "$SOURCE_SPACE_ID" ]; then
            echo "Error: Source Space ID for '$INPUT_SOURCE_NAME' (via env var '$SOURCE_SPACE_ID_ENV_VAR_NAME') resolved to an empty string." >&2
            echo "Please ensure the GitHub secret '$SOURCE_SPACE_ID_ENV_VAR_NAME' (e.g., STORYBLOK_SPACE_ID_DEV) is set and not empty." >&2
            exit 1
          fi

          # Resolve Target Space ID from the corresponding secret
          TARGET_SPACE_ID_ENV_VAR_NAME=$(get_env_var_for_space_id "$INPUT_TARGET_NAME")
          TARGET_SPACE_ID="${!TARGET_SPACE_ID_ENV_VAR_NAME}" # Indirect expansion
          if [ -z "$TARGET_SPACE_ID" ]; then
            echo "Error: Target Space ID for '$INPUT_TARGET_NAME' (via env var '$TARGET_SPACE_ID_ENV_VAR_NAME') resolved to an empty string." >&2
            echo "Please ensure the GitHub secret '$TARGET_SPACE_ID_ENV_VAR_NAME' (e.g., STORYBLOK_SPACE_ID_STAGE) is set and not empty." >&2
            exit 1
          fi

          # Safety check: prevent migration if source and target are the same
          if [ "$SOURCE_SPACE_ID" == "$TARGET_SPACE_ID" ]; then
            echo "Error: Source Space ID ('$SOURCE_SPACE_ID' for '$INPUT_SOURCE_NAME') and Target Space ID ('$TARGET_SPACE_ID' for '$INPUT_TARGET_NAME') are the same." >&2
            echo "Migration operation aborted to prevent accidental self-overwrite." >&2
            exit 1
          fi

          echo "--- Migration Configuration ---"
          echo "Source Space: $INPUT_SOURCE_NAME (ID: $SOURCE_SPACE_ID)"
          echo "Target Space: $INPUT_TARGET_NAME (ID: $TARGET_SPACE_ID)"
          echo "Item Type to Migrate: $INPUT_ITEM_TYPE"
          echo "Raw Item Names (CSV): '$INPUT_ITEM_NAMES_CSV'"
          echo "-------------------------------"

          # Validate that item names are provided
          if [ -z "$INPUT_ITEM_NAMES_CSV" ]; then
            echo "Error: No item names were provided in the 'item_names' input." >&2
            exit 1
          fi

          # Convert the comma-separated string of item names into a bash array
          # This also trims whitespace around each item name
          IFS=',' read -r -a ITEM_NAMES_ARRAY_WITH_SPACES <<< "$INPUT_ITEM_NAMES_CSV"
          ITEM_NAMES_TO_MIGRATE=()
          for name_with_space in "${ITEM_NAMES_ARRAY_WITH_SPACES[@]}"; do
            TRIMMED_NAME=$(echo "$name_with_space" | xargs) # xargs is a neat way to trim whitespace
            if [ -n "$TRIMMED_NAME" ]; then # Add to array only if not empty after trimming
              ITEM_NAMES_TO_MIGRATE+=("$TRIMMED_NAME")
            fi
          done

          if [ ${#ITEM_NAMES_TO_MIGRATE[@]} -eq 0 ]; then
            echo "Error: No valid item names found after parsing the 'item_names' input." >&2
            echo "Please ensure you provide a comma-separated list of names." >&2
            exit 1
          fi

          echo "Parsed items to migrate: ${ITEM_NAMES_TO_MIGRATE[@]}"
          echo "==========================================="

          MIGRATION_SUCCESSFUL_COUNT=0
          MIGRATION_FAILED_COUNT=0

          # Loop through each item name and attempt to migrate it
          for ITEM_NAME in "${ITEM_NAMES_TO_MIGRATE[@]}"; do
            echo "Attempting to migrate $INPUT_ITEM_TYPE: '$ITEM_NAME'"
            echo "From Source Space ID: $SOURCE_SPACE_ID"
            echo "To Target Space ID: $TARGET_SPACE_ID"

            # Construct and execute the Storyblok CLI migrate command
            # Syntax: storyblok migrate <type> --name <name_of_item> --from <source_space_id> --to <target_space_id>
            # The <name_of_item> should be the component name, datasource name, story slug, folder path, or role name.
            if storyblok migrate "$INPUT_ITEM_TYPE" --name "$ITEM_NAME" --from "$SOURCE_SPACE_ID" --to "$TARGET_SPACE_ID"; then
              echo "Successfully migrated $INPUT_ITEM_TYPE: '$ITEM_NAME'."
              MIGRATION_SUCCESSFUL_COUNT=$((MIGRATION_SUCCESSFUL_COUNT + 1))
            else
              # Log the error but continue with the next item
              echo "ERROR: Failed to migrate $INPUT_ITEM_TYPE: '$ITEM_NAME'." >&2
              MIGRATION_FAILED_COUNT=$((MIGRATION_FAILED_COUNT + 1))
              # If you want the workflow to fail immediately on the first error, uncomment the next line:
              # exit 1
            fi
            echo "-------------------------------------------"
          done

          echo "==========================================="
          echo "Migration Summary:"
          echo "Successfully migrated items: $MIGRATION_SUCCESSFUL_COUNT"
          echo "Failed to migrate items: $MIGRATION_FAILED_COUNT"
          echo "==========================================="

          # Optionally, fail the workflow if any migrations failed
          if [ "$MIGRATION_FAILED_COUNT" -gt 0 ]; then
            echo "One or more item migrations failed. Please review the logs above." >&2
            # exit 1 # Uncomment to make the entire job fail if there were errors
          fi

          # Optionally, fail if items were specified but none were migrated (e.g., all names were wrong)
          if [ "$MIGRATION_SUCCESSFUL_COUNT" -eq 0 ] && [ ${#ITEM_NAMES_TO_MIGRATE[@]} -gt 0 ]; then
             echo "Warning: No items were successfully migrated, although ${#ITEM_NAMES_TO_MIGRATE[@]} item(s) were specified." >&2
             # exit 1 # Uncomment to make the job fail if nothing was actually migrated
          fi

      - name: Migration Process Complete
        run: echo "Storyblok specific item migration process has finished."
